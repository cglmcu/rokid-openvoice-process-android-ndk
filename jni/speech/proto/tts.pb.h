// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tts.proto

#ifndef PROTOBUF_tts_2eproto__INCLUDED
#define PROTOBUF_tts_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "speech_types.pb.h"  // IWYU pragma: export
// @@protoc_insertion_point(includes)

namespace rokid {
namespace open {
namespace speech {
namespace v1 {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_tts_2eproto();
void protobuf_AssignDesc_tts_2eproto();
void protobuf_ShutdownFile_tts_2eproto();

class TtsRequest;
class TtsResponse;

// ===================================================================

class TtsRequest : public ::google::protobuf::Message {
 public:
  TtsRequest();
  virtual ~TtsRequest();

  TtsRequest(const TtsRequest& from);

  inline TtsRequest& operator=(const TtsRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TtsRequest& default_instance();

  void Swap(TtsRequest* other);

  // implements Message ----------------------------------------------

  TtsRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TtsRequest& from);
  void MergeFrom(const TtsRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required string text = 2;
  inline bool has_text() const;
  inline void clear_text();
  static const int kTextFieldNumber = 2;
  inline const ::std::string& text() const;
  inline void set_text(const ::std::string& value);
  inline void set_text(const char* value);
  inline void set_text(const char* value, size_t size);
  inline ::std::string* mutable_text();
  inline ::std::string* release_text();
  inline void set_allocated_text(::std::string* text);

  // optional string declaimer = 3;
  inline bool has_declaimer() const;
  inline void clear_declaimer();
  static const int kDeclaimerFieldNumber = 3;
  inline const ::std::string& declaimer() const;
  inline void set_declaimer(const ::std::string& value);
  inline void set_declaimer(const char* value);
  inline void set_declaimer(const char* value, size_t size);
  inline ::std::string* mutable_declaimer();
  inline ::std::string* release_declaimer();
  inline void set_allocated_declaimer(::std::string* declaimer);

  // optional string codec = 4;
  inline bool has_codec() const;
  inline void clear_codec();
  static const int kCodecFieldNumber = 4;
  inline const ::std::string& codec() const;
  inline void set_codec(const ::std::string& value);
  inline void set_codec(const char* value);
  inline void set_codec(const char* value, size_t size);
  inline ::std::string* mutable_codec();
  inline ::std::string* release_codec();
  inline void set_allocated_codec(::std::string* codec);

  // @@protoc_insertion_point(class_scope:rokid.open.speech.v1.TtsRequest)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_text();
  inline void clear_has_text();
  inline void set_has_declaimer();
  inline void clear_has_declaimer();
  inline void set_has_codec();
  inline void clear_has_codec();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* text_;
  ::std::string* declaimer_;
  ::std::string* codec_;
  ::google::protobuf::int32 id_;
  friend void  protobuf_AddDesc_tts_2eproto();
  friend void protobuf_AssignDesc_tts_2eproto();
  friend void protobuf_ShutdownFile_tts_2eproto();

  void InitAsDefaultInstance();
  static TtsRequest* default_instance_;
};
// -------------------------------------------------------------------

class TtsResponse : public ::google::protobuf::Message {
 public:
  TtsResponse();
  virtual ~TtsResponse();

  TtsResponse(const TtsResponse& from);

  inline TtsResponse& operator=(const TtsResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TtsResponse& default_instance();

  void Swap(TtsResponse* other);

  // implements Message ----------------------------------------------

  TtsResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TtsResponse& from);
  void MergeFrom(const TtsResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required .rokid.open.speech.v1.SpeechErrorCode result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::rokid::open::speech::v1::SpeechErrorCode result() const;
  inline void set_result(::rokid::open::speech::v1::SpeechErrorCode value);

  // optional string text = 3;
  inline bool has_text() const;
  inline void clear_text();
  static const int kTextFieldNumber = 3;
  inline const ::std::string& text() const;
  inline void set_text(const ::std::string& value);
  inline void set_text(const char* value);
  inline void set_text(const char* value, size_t size);
  inline ::std::string* mutable_text();
  inline ::std::string* release_text();
  inline void set_allocated_text(::std::string* text);

  // optional bytes voice = 4;
  inline bool has_voice() const;
  inline void clear_voice();
  static const int kVoiceFieldNumber = 4;
  inline const ::std::string& voice() const;
  inline void set_voice(const ::std::string& value);
  inline void set_voice(const char* value);
  inline void set_voice(const void* value, size_t size);
  inline ::std::string* mutable_voice();
  inline ::std::string* release_voice();
  inline void set_allocated_voice(::std::string* voice);

  // optional bool finish = 5;
  inline bool has_finish() const;
  inline void clear_finish();
  static const int kFinishFieldNumber = 5;
  inline bool finish() const;
  inline void set_finish(bool value);

  // @@protoc_insertion_point(class_scope:rokid.open.speech.v1.TtsResponse)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_text();
  inline void clear_has_text();
  inline void set_has_voice();
  inline void clear_has_voice();
  inline void set_has_finish();
  inline void clear_has_finish();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 id_;
  int result_;
  ::std::string* text_;
  ::std::string* voice_;
  bool finish_;
  friend void  protobuf_AddDesc_tts_2eproto();
  friend void protobuf_AssignDesc_tts_2eproto();
  friend void protobuf_ShutdownFile_tts_2eproto();

  void InitAsDefaultInstance();
  static TtsResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// TtsRequest

// required int32 id = 1;
inline bool TtsRequest::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TtsRequest::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TtsRequest::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TtsRequest::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 TtsRequest::id() const {
  // @@protoc_insertion_point(field_get:rokid.open.speech.v1.TtsRequest.id)
  return id_;
}
inline void TtsRequest::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:rokid.open.speech.v1.TtsRequest.id)
}

// required string text = 2;
inline bool TtsRequest::has_text() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TtsRequest::set_has_text() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TtsRequest::clear_has_text() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TtsRequest::clear_text() {
  if (text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    text_->clear();
  }
  clear_has_text();
}
inline const ::std::string& TtsRequest::text() const {
  // @@protoc_insertion_point(field_get:rokid.open.speech.v1.TtsRequest.text)
  return *text_;
}
inline void TtsRequest::set_text(const ::std::string& value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    text_ = new ::std::string;
  }
  text_->assign(value);
  // @@protoc_insertion_point(field_set:rokid.open.speech.v1.TtsRequest.text)
}
inline void TtsRequest::set_text(const char* value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    text_ = new ::std::string;
  }
  text_->assign(value);
  // @@protoc_insertion_point(field_set_char:rokid.open.speech.v1.TtsRequest.text)
}
inline void TtsRequest::set_text(const char* value, size_t size) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    text_ = new ::std::string;
  }
  text_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:rokid.open.speech.v1.TtsRequest.text)
}
inline ::std::string* TtsRequest::mutable_text() {
  set_has_text();
  if (text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    text_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:rokid.open.speech.v1.TtsRequest.text)
  return text_;
}
inline ::std::string* TtsRequest::release_text() {
  clear_has_text();
  if (text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = text_;
    text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TtsRequest::set_allocated_text(::std::string* text) {
  if (text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete text_;
  }
  if (text) {
    set_has_text();
    text_ = text;
  } else {
    clear_has_text();
    text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:rokid.open.speech.v1.TtsRequest.text)
}

// optional string declaimer = 3;
inline bool TtsRequest::has_declaimer() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TtsRequest::set_has_declaimer() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TtsRequest::clear_has_declaimer() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TtsRequest::clear_declaimer() {
  if (declaimer_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    declaimer_->clear();
  }
  clear_has_declaimer();
}
inline const ::std::string& TtsRequest::declaimer() const {
  // @@protoc_insertion_point(field_get:rokid.open.speech.v1.TtsRequest.declaimer)
  return *declaimer_;
}
inline void TtsRequest::set_declaimer(const ::std::string& value) {
  set_has_declaimer();
  if (declaimer_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    declaimer_ = new ::std::string;
  }
  declaimer_->assign(value);
  // @@protoc_insertion_point(field_set:rokid.open.speech.v1.TtsRequest.declaimer)
}
inline void TtsRequest::set_declaimer(const char* value) {
  set_has_declaimer();
  if (declaimer_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    declaimer_ = new ::std::string;
  }
  declaimer_->assign(value);
  // @@protoc_insertion_point(field_set_char:rokid.open.speech.v1.TtsRequest.declaimer)
}
inline void TtsRequest::set_declaimer(const char* value, size_t size) {
  set_has_declaimer();
  if (declaimer_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    declaimer_ = new ::std::string;
  }
  declaimer_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:rokid.open.speech.v1.TtsRequest.declaimer)
}
inline ::std::string* TtsRequest::mutable_declaimer() {
  set_has_declaimer();
  if (declaimer_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    declaimer_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:rokid.open.speech.v1.TtsRequest.declaimer)
  return declaimer_;
}
inline ::std::string* TtsRequest::release_declaimer() {
  clear_has_declaimer();
  if (declaimer_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = declaimer_;
    declaimer_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TtsRequest::set_allocated_declaimer(::std::string* declaimer) {
  if (declaimer_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete declaimer_;
  }
  if (declaimer) {
    set_has_declaimer();
    declaimer_ = declaimer;
  } else {
    clear_has_declaimer();
    declaimer_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:rokid.open.speech.v1.TtsRequest.declaimer)
}

// optional string codec = 4;
inline bool TtsRequest::has_codec() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TtsRequest::set_has_codec() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TtsRequest::clear_has_codec() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TtsRequest::clear_codec() {
  if (codec_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    codec_->clear();
  }
  clear_has_codec();
}
inline const ::std::string& TtsRequest::codec() const {
  // @@protoc_insertion_point(field_get:rokid.open.speech.v1.TtsRequest.codec)
  return *codec_;
}
inline void TtsRequest::set_codec(const ::std::string& value) {
  set_has_codec();
  if (codec_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    codec_ = new ::std::string;
  }
  codec_->assign(value);
  // @@protoc_insertion_point(field_set:rokid.open.speech.v1.TtsRequest.codec)
}
inline void TtsRequest::set_codec(const char* value) {
  set_has_codec();
  if (codec_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    codec_ = new ::std::string;
  }
  codec_->assign(value);
  // @@protoc_insertion_point(field_set_char:rokid.open.speech.v1.TtsRequest.codec)
}
inline void TtsRequest::set_codec(const char* value, size_t size) {
  set_has_codec();
  if (codec_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    codec_ = new ::std::string;
  }
  codec_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:rokid.open.speech.v1.TtsRequest.codec)
}
inline ::std::string* TtsRequest::mutable_codec() {
  set_has_codec();
  if (codec_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    codec_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:rokid.open.speech.v1.TtsRequest.codec)
  return codec_;
}
inline ::std::string* TtsRequest::release_codec() {
  clear_has_codec();
  if (codec_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = codec_;
    codec_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TtsRequest::set_allocated_codec(::std::string* codec) {
  if (codec_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete codec_;
  }
  if (codec) {
    set_has_codec();
    codec_ = codec;
  } else {
    clear_has_codec();
    codec_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:rokid.open.speech.v1.TtsRequest.codec)
}

// -------------------------------------------------------------------

// TtsResponse

// required int32 id = 1;
inline bool TtsResponse::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TtsResponse::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TtsResponse::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TtsResponse::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 TtsResponse::id() const {
  // @@protoc_insertion_point(field_get:rokid.open.speech.v1.TtsResponse.id)
  return id_;
}
inline void TtsResponse::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:rokid.open.speech.v1.TtsResponse.id)
}

// required .rokid.open.speech.v1.SpeechErrorCode result = 2;
inline bool TtsResponse::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TtsResponse::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TtsResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TtsResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::rokid::open::speech::v1::SpeechErrorCode TtsResponse::result() const {
  // @@protoc_insertion_point(field_get:rokid.open.speech.v1.TtsResponse.result)
  return static_cast< ::rokid::open::speech::v1::SpeechErrorCode >(result_);
}
inline void TtsResponse::set_result(::rokid::open::speech::v1::SpeechErrorCode value) {
  assert(::rokid::open::speech::v1::SpeechErrorCode_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:rokid.open.speech.v1.TtsResponse.result)
}

// optional string text = 3;
inline bool TtsResponse::has_text() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TtsResponse::set_has_text() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TtsResponse::clear_has_text() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TtsResponse::clear_text() {
  if (text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    text_->clear();
  }
  clear_has_text();
}
inline const ::std::string& TtsResponse::text() const {
  // @@protoc_insertion_point(field_get:rokid.open.speech.v1.TtsResponse.text)
  return *text_;
}
inline void TtsResponse::set_text(const ::std::string& value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    text_ = new ::std::string;
  }
  text_->assign(value);
  // @@protoc_insertion_point(field_set:rokid.open.speech.v1.TtsResponse.text)
}
inline void TtsResponse::set_text(const char* value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    text_ = new ::std::string;
  }
  text_->assign(value);
  // @@protoc_insertion_point(field_set_char:rokid.open.speech.v1.TtsResponse.text)
}
inline void TtsResponse::set_text(const char* value, size_t size) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    text_ = new ::std::string;
  }
  text_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:rokid.open.speech.v1.TtsResponse.text)
}
inline ::std::string* TtsResponse::mutable_text() {
  set_has_text();
  if (text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    text_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:rokid.open.speech.v1.TtsResponse.text)
  return text_;
}
inline ::std::string* TtsResponse::release_text() {
  clear_has_text();
  if (text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = text_;
    text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TtsResponse::set_allocated_text(::std::string* text) {
  if (text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete text_;
  }
  if (text) {
    set_has_text();
    text_ = text;
  } else {
    clear_has_text();
    text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:rokid.open.speech.v1.TtsResponse.text)
}

// optional bytes voice = 4;
inline bool TtsResponse::has_voice() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TtsResponse::set_has_voice() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TtsResponse::clear_has_voice() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TtsResponse::clear_voice() {
  if (voice_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    voice_->clear();
  }
  clear_has_voice();
}
inline const ::std::string& TtsResponse::voice() const {
  // @@protoc_insertion_point(field_get:rokid.open.speech.v1.TtsResponse.voice)
  return *voice_;
}
inline void TtsResponse::set_voice(const ::std::string& value) {
  set_has_voice();
  if (voice_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    voice_ = new ::std::string;
  }
  voice_->assign(value);
  // @@protoc_insertion_point(field_set:rokid.open.speech.v1.TtsResponse.voice)
}
inline void TtsResponse::set_voice(const char* value) {
  set_has_voice();
  if (voice_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    voice_ = new ::std::string;
  }
  voice_->assign(value);
  // @@protoc_insertion_point(field_set_char:rokid.open.speech.v1.TtsResponse.voice)
}
inline void TtsResponse::set_voice(const void* value, size_t size) {
  set_has_voice();
  if (voice_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    voice_ = new ::std::string;
  }
  voice_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:rokid.open.speech.v1.TtsResponse.voice)
}
inline ::std::string* TtsResponse::mutable_voice() {
  set_has_voice();
  if (voice_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    voice_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:rokid.open.speech.v1.TtsResponse.voice)
  return voice_;
}
inline ::std::string* TtsResponse::release_voice() {
  clear_has_voice();
  if (voice_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = voice_;
    voice_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TtsResponse::set_allocated_voice(::std::string* voice) {
  if (voice_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete voice_;
  }
  if (voice) {
    set_has_voice();
    voice_ = voice;
  } else {
    clear_has_voice();
    voice_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:rokid.open.speech.v1.TtsResponse.voice)
}

// optional bool finish = 5;
inline bool TtsResponse::has_finish() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TtsResponse::set_has_finish() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TtsResponse::clear_has_finish() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TtsResponse::clear_finish() {
  finish_ = false;
  clear_has_finish();
}
inline bool TtsResponse::finish() const {
  // @@protoc_insertion_point(field_get:rokid.open.speech.v1.TtsResponse.finish)
  return finish_;
}
inline void TtsResponse::set_finish(bool value) {
  set_has_finish();
  finish_ = value;
  // @@protoc_insertion_point(field_set:rokid.open.speech.v1.TtsResponse.finish)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace speech
}  // namespace open
}  // namespace rokid

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_tts_2eproto__INCLUDED
