// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: speech.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "speech.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace rokid {
namespace open {
namespace speech {
namespace v2 {

namespace {

const ::google::protobuf::Descriptor* SpeechOptions_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SpeechOptions_reflection_ = NULL;
const ::google::protobuf::Descriptor* SpeechRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SpeechRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SpeechResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SpeechResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* RespType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Lang_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* VadMode_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_speech_2eproto() {
  protobuf_AddDesc_speech_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "speech.proto");
  GOOGLE_CHECK(file != NULL);
  SpeechOptions_descriptor_ = file->message_type(0);
  static const int SpeechOptions_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeechOptions, lang_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeechOptions, codec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeechOptions, vad_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeechOptions, vend_timeout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeechOptions, no_nlp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeechOptions, no_intermediate_asr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeechOptions, stack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeechOptions, voice_trigger_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeechOptions, voice_power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeechOptions, trigger_start_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeechOptions, trigger_length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeechOptions, skill_options_),
  };
  SpeechOptions_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SpeechOptions_descriptor_,
      SpeechOptions::default_instance_,
      SpeechOptions_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeechOptions, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeechOptions, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SpeechOptions));
  SpeechRequest_descriptor_ = file->message_type(1);
  static const int SpeechRequest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeechRequest, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeechRequest, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeechRequest, voice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeechRequest, asr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeechRequest, options_),
  };
  SpeechRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SpeechRequest_descriptor_,
      SpeechRequest::default_instance_,
      SpeechRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeechRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeechRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SpeechRequest));
  SpeechResponse_descriptor_ = file->message_type(2);
  static const int SpeechResponse_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeechResponse, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeechResponse, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeechResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeechResponse, asr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeechResponse, nlp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeechResponse, action_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeechResponse, extra_),
  };
  SpeechResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SpeechResponse_descriptor_,
      SpeechResponse::default_instance_,
      SpeechResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeechResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeechResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SpeechResponse));
  RespType_descriptor_ = file->enum_type(0);
  Lang_descriptor_ = file->enum_type(1);
  VadMode_descriptor_ = file->enum_type(2);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_speech_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SpeechOptions_descriptor_, &SpeechOptions::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SpeechRequest_descriptor_, &SpeechRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SpeechResponse_descriptor_, &SpeechResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_speech_2eproto() {
  delete SpeechOptions::default_instance_;
  delete SpeechOptions_reflection_;
  delete SpeechRequest::default_instance_;
  delete SpeechRequest_reflection_;
  delete SpeechResponse::default_instance_;
  delete SpeechResponse_reflection_;
}

void protobuf_AddDesc_speech_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::rokid::open::speech::v1::protobuf_AddDesc_speech_5ftypes_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014speech.proto\022\024rokid.open.speech.v2\032\022sp"
    "eech_types.proto\"\332\002\n\rSpeechOptions\022(\n\004la"
    "ng\030\001 \002(\0162\032.rokid.open.speech.v2.Lang\022*\n\005"
    "codec\030\002 \002(\0162\033.rokid.open.speech.v1.Codec"
    "\022/\n\010vad_mode\030\003 \002(\0162\035.rokid.open.speech.v"
    "2.VadMode\022\024\n\014vend_timeout\030\004 \001(\r\022\016\n\006no_nl"
    "p\030\005 \002(\010\022\033\n\023no_intermediate_asr\030\006 \002(\010\022\r\n\005"
    "stack\030\007 \001(\t\022\025\n\rvoice_trigger\030\010 \001(\t\022\023\n\013vo"
    "ice_power\030\t \001(\002\022\025\n\rtrigger_start\030\n \001(\r\022\026"
    "\n\016trigger_length\030\013 \001(\r\022\025\n\rskill_options\030"
    "\014 \001(\t\"\232\001\n\rSpeechRequest\022\n\n\002id\030\001 \002(\005\022+\n\004t"
    "ype\030\002 \002(\0162\035.rokid.open.speech.v1.ReqType"
    "\022\r\n\005voice\030\003 \001(\014\022\013\n\003asr\030\004 \001(\t\0224\n\007options\030"
    "\005 \001(\0132#.rokid.open.speech.v2.SpeechOptio"
    "ns\"\272\001\n\016SpeechResponse\022\n\n\002id\030\001 \002(\005\022,\n\004typ"
    "e\030\002 \002(\0162\036.rokid.open.speech.v2.RespType\022"
    "5\n\006result\030\003 \002(\0162%.rokid.open.speech.v1.S"
    "peechErrorCode\022\013\n\003asr\030\004 \001(\t\022\013\n\003nlp\030\005 \001(\t"
    "\022\016\n\006action\030\006 \001(\t\022\r\n\005extra\030\007 \001(\t*8\n\010RespT"
    "ype\022\020\n\014INTERMEDIATE\020\000\022\016\n\nASR_FINISH\020\001\022\n\n"
    "\006FINISH\020\002*\026\n\004Lang\022\006\n\002ZH\020\000\022\006\n\002EN\020\001*\037\n\007Vad"
    "Mode\022\t\n\005LOCAL\020\000\022\t\n\005CLOUD\020\001P\000", 868);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "speech.proto", &protobuf_RegisterTypes);
  SpeechOptions::default_instance_ = new SpeechOptions();
  SpeechRequest::default_instance_ = new SpeechRequest();
  SpeechResponse::default_instance_ = new SpeechResponse();
  SpeechOptions::default_instance_->InitAsDefaultInstance();
  SpeechRequest::default_instance_->InitAsDefaultInstance();
  SpeechResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_speech_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_speech_2eproto {
  StaticDescriptorInitializer_speech_2eproto() {
    protobuf_AddDesc_speech_2eproto();
  }
} static_descriptor_initializer_speech_2eproto_;
const ::google::protobuf::EnumDescriptor* RespType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RespType_descriptor_;
}
bool RespType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Lang_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Lang_descriptor_;
}
bool Lang_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* VadMode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VadMode_descriptor_;
}
bool VadMode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int SpeechOptions::kLangFieldNumber;
const int SpeechOptions::kCodecFieldNumber;
const int SpeechOptions::kVadModeFieldNumber;
const int SpeechOptions::kVendTimeoutFieldNumber;
const int SpeechOptions::kNoNlpFieldNumber;
const int SpeechOptions::kNoIntermediateAsrFieldNumber;
const int SpeechOptions::kStackFieldNumber;
const int SpeechOptions::kVoiceTriggerFieldNumber;
const int SpeechOptions::kVoicePowerFieldNumber;
const int SpeechOptions::kTriggerStartFieldNumber;
const int SpeechOptions::kTriggerLengthFieldNumber;
const int SpeechOptions::kSkillOptionsFieldNumber;
#endif  // !_MSC_VER

SpeechOptions::SpeechOptions()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rokid.open.speech.v2.SpeechOptions)
}

void SpeechOptions::InitAsDefaultInstance() {
}

SpeechOptions::SpeechOptions(const SpeechOptions& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rokid.open.speech.v2.SpeechOptions)
}

void SpeechOptions::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  lang_ = 0;
  codec_ = 0;
  vad_mode_ = 0;
  vend_timeout_ = 0u;
  no_nlp_ = false;
  no_intermediate_asr_ = false;
  stack_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  voice_trigger_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  voice_power_ = 0;
  trigger_start_ = 0u;
  trigger_length_ = 0u;
  skill_options_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SpeechOptions::~SpeechOptions() {
  // @@protoc_insertion_point(destructor:rokid.open.speech.v2.SpeechOptions)
  SharedDtor();
}

void SpeechOptions::SharedDtor() {
  if (stack_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete stack_;
  }
  if (voice_trigger_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete voice_trigger_;
  }
  if (skill_options_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete skill_options_;
  }
  if (this != default_instance_) {
  }
}

void SpeechOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SpeechOptions::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SpeechOptions_descriptor_;
}

const SpeechOptions& SpeechOptions::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_speech_2eproto();
  return *default_instance_;
}

SpeechOptions* SpeechOptions::default_instance_ = NULL;

SpeechOptions* SpeechOptions::New() const {
  return new SpeechOptions;
}

void SpeechOptions::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SpeechOptions*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(lang_, no_intermediate_asr_);
    if (has_stack()) {
      if (stack_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        stack_->clear();
      }
    }
    if (has_voice_trigger()) {
      if (voice_trigger_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        voice_trigger_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 3840) {
    ZR_(trigger_start_, trigger_length_);
    voice_power_ = 0;
    if (has_skill_options()) {
      if (skill_options_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        skill_options_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SpeechOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rokid.open.speech.v2.SpeechOptions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .rokid.open.speech.v2.Lang lang = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::rokid::open::speech::v2::Lang_IsValid(value)) {
            set_lang(static_cast< ::rokid::open::speech::v2::Lang >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_codec;
        break;
      }

      // required .rokid.open.speech.v1.Codec codec = 2;
      case 2: {
        if (tag == 16) {
         parse_codec:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::rokid::open::speech::v1::Codec_IsValid(value)) {
            set_codec(static_cast< ::rokid::open::speech::v1::Codec >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_vad_mode;
        break;
      }

      // required .rokid.open.speech.v2.VadMode vad_mode = 3;
      case 3: {
        if (tag == 24) {
         parse_vad_mode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::rokid::open::speech::v2::VadMode_IsValid(value)) {
            set_vad_mode(static_cast< ::rokid::open::speech::v2::VadMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_vend_timeout;
        break;
      }

      // optional uint32 vend_timeout = 4;
      case 4: {
        if (tag == 32) {
         parse_vend_timeout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vend_timeout_)));
          set_has_vend_timeout();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_no_nlp;
        break;
      }

      // required bool no_nlp = 5;
      case 5: {
        if (tag == 40) {
         parse_no_nlp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &no_nlp_)));
          set_has_no_nlp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_no_intermediate_asr;
        break;
      }

      // required bool no_intermediate_asr = 6;
      case 6: {
        if (tag == 48) {
         parse_no_intermediate_asr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &no_intermediate_asr_)));
          set_has_no_intermediate_asr();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_stack;
        break;
      }

      // optional string stack = 7;
      case 7: {
        if (tag == 58) {
         parse_stack:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stack()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->stack().data(), this->stack().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "stack");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_voice_trigger;
        break;
      }

      // optional string voice_trigger = 8;
      case 8: {
        if (tag == 66) {
         parse_voice_trigger:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_voice_trigger()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->voice_trigger().data(), this->voice_trigger().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "voice_trigger");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(77)) goto parse_voice_power;
        break;
      }

      // optional float voice_power = 9;
      case 9: {
        if (tag == 77) {
         parse_voice_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &voice_power_)));
          set_has_voice_power();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_trigger_start;
        break;
      }

      // optional uint32 trigger_start = 10;
      case 10: {
        if (tag == 80) {
         parse_trigger_start:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &trigger_start_)));
          set_has_trigger_start();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_trigger_length;
        break;
      }

      // optional uint32 trigger_length = 11;
      case 11: {
        if (tag == 88) {
         parse_trigger_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &trigger_length_)));
          set_has_trigger_length();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_skill_options;
        break;
      }

      // optional string skill_options = 12;
      case 12: {
        if (tag == 98) {
         parse_skill_options:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_skill_options()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->skill_options().data(), this->skill_options().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "skill_options");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rokid.open.speech.v2.SpeechOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rokid.open.speech.v2.SpeechOptions)
  return false;
#undef DO_
}

void SpeechOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rokid.open.speech.v2.SpeechOptions)
  // required .rokid.open.speech.v2.Lang lang = 1;
  if (has_lang()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->lang(), output);
  }

  // required .rokid.open.speech.v1.Codec codec = 2;
  if (has_codec()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->codec(), output);
  }

  // required .rokid.open.speech.v2.VadMode vad_mode = 3;
  if (has_vad_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->vad_mode(), output);
  }

  // optional uint32 vend_timeout = 4;
  if (has_vend_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->vend_timeout(), output);
  }

  // required bool no_nlp = 5;
  if (has_no_nlp()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->no_nlp(), output);
  }

  // required bool no_intermediate_asr = 6;
  if (has_no_intermediate_asr()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->no_intermediate_asr(), output);
  }

  // optional string stack = 7;
  if (has_stack()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stack().data(), this->stack().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "stack");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->stack(), output);
  }

  // optional string voice_trigger = 8;
  if (has_voice_trigger()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->voice_trigger().data(), this->voice_trigger().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "voice_trigger");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->voice_trigger(), output);
  }

  // optional float voice_power = 9;
  if (has_voice_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->voice_power(), output);
  }

  // optional uint32 trigger_start = 10;
  if (has_trigger_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->trigger_start(), output);
  }

  // optional uint32 trigger_length = 11;
  if (has_trigger_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->trigger_length(), output);
  }

  // optional string skill_options = 12;
  if (has_skill_options()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->skill_options().data(), this->skill_options().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "skill_options");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->skill_options(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:rokid.open.speech.v2.SpeechOptions)
}

::google::protobuf::uint8* SpeechOptions::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rokid.open.speech.v2.SpeechOptions)
  // required .rokid.open.speech.v2.Lang lang = 1;
  if (has_lang()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->lang(), target);
  }

  // required .rokid.open.speech.v1.Codec codec = 2;
  if (has_codec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->codec(), target);
  }

  // required .rokid.open.speech.v2.VadMode vad_mode = 3;
  if (has_vad_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->vad_mode(), target);
  }

  // optional uint32 vend_timeout = 4;
  if (has_vend_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->vend_timeout(), target);
  }

  // required bool no_nlp = 5;
  if (has_no_nlp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->no_nlp(), target);
  }

  // required bool no_intermediate_asr = 6;
  if (has_no_intermediate_asr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->no_intermediate_asr(), target);
  }

  // optional string stack = 7;
  if (has_stack()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stack().data(), this->stack().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "stack");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->stack(), target);
  }

  // optional string voice_trigger = 8;
  if (has_voice_trigger()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->voice_trigger().data(), this->voice_trigger().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "voice_trigger");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->voice_trigger(), target);
  }

  // optional float voice_power = 9;
  if (has_voice_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->voice_power(), target);
  }

  // optional uint32 trigger_start = 10;
  if (has_trigger_start()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->trigger_start(), target);
  }

  // optional uint32 trigger_length = 11;
  if (has_trigger_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->trigger_length(), target);
  }

  // optional string skill_options = 12;
  if (has_skill_options()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->skill_options().data(), this->skill_options().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "skill_options");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->skill_options(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rokid.open.speech.v2.SpeechOptions)
  return target;
}

int SpeechOptions::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .rokid.open.speech.v2.Lang lang = 1;
    if (has_lang()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->lang());
    }

    // required .rokid.open.speech.v1.Codec codec = 2;
    if (has_codec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->codec());
    }

    // required .rokid.open.speech.v2.VadMode vad_mode = 3;
    if (has_vad_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->vad_mode());
    }

    // optional uint32 vend_timeout = 4;
    if (has_vend_timeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vend_timeout());
    }

    // required bool no_nlp = 5;
    if (has_no_nlp()) {
      total_size += 1 + 1;
    }

    // required bool no_intermediate_asr = 6;
    if (has_no_intermediate_asr()) {
      total_size += 1 + 1;
    }

    // optional string stack = 7;
    if (has_stack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stack());
    }

    // optional string voice_trigger = 8;
    if (has_voice_trigger()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->voice_trigger());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float voice_power = 9;
    if (has_voice_power()) {
      total_size += 1 + 4;
    }

    // optional uint32 trigger_start = 10;
    if (has_trigger_start()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->trigger_start());
    }

    // optional uint32 trigger_length = 11;
    if (has_trigger_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->trigger_length());
    }

    // optional string skill_options = 12;
    if (has_skill_options()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->skill_options());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpeechOptions::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SpeechOptions* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SpeechOptions*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SpeechOptions::MergeFrom(const SpeechOptions& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lang()) {
      set_lang(from.lang());
    }
    if (from.has_codec()) {
      set_codec(from.codec());
    }
    if (from.has_vad_mode()) {
      set_vad_mode(from.vad_mode());
    }
    if (from.has_vend_timeout()) {
      set_vend_timeout(from.vend_timeout());
    }
    if (from.has_no_nlp()) {
      set_no_nlp(from.no_nlp());
    }
    if (from.has_no_intermediate_asr()) {
      set_no_intermediate_asr(from.no_intermediate_asr());
    }
    if (from.has_stack()) {
      set_stack(from.stack());
    }
    if (from.has_voice_trigger()) {
      set_voice_trigger(from.voice_trigger());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_voice_power()) {
      set_voice_power(from.voice_power());
    }
    if (from.has_trigger_start()) {
      set_trigger_start(from.trigger_start());
    }
    if (from.has_trigger_length()) {
      set_trigger_length(from.trigger_length());
    }
    if (from.has_skill_options()) {
      set_skill_options(from.skill_options());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SpeechOptions::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpeechOptions::CopyFrom(const SpeechOptions& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpeechOptions::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000037) != 0x00000037) return false;

  return true;
}

void SpeechOptions::Swap(SpeechOptions* other) {
  if (other != this) {
    std::swap(lang_, other->lang_);
    std::swap(codec_, other->codec_);
    std::swap(vad_mode_, other->vad_mode_);
    std::swap(vend_timeout_, other->vend_timeout_);
    std::swap(no_nlp_, other->no_nlp_);
    std::swap(no_intermediate_asr_, other->no_intermediate_asr_);
    std::swap(stack_, other->stack_);
    std::swap(voice_trigger_, other->voice_trigger_);
    std::swap(voice_power_, other->voice_power_);
    std::swap(trigger_start_, other->trigger_start_);
    std::swap(trigger_length_, other->trigger_length_);
    std::swap(skill_options_, other->skill_options_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SpeechOptions::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SpeechOptions_descriptor_;
  metadata.reflection = SpeechOptions_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SpeechRequest::kIdFieldNumber;
const int SpeechRequest::kTypeFieldNumber;
const int SpeechRequest::kVoiceFieldNumber;
const int SpeechRequest::kAsrFieldNumber;
const int SpeechRequest::kOptionsFieldNumber;
#endif  // !_MSC_VER

SpeechRequest::SpeechRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rokid.open.speech.v2.SpeechRequest)
}

void SpeechRequest::InitAsDefaultInstance() {
  options_ = const_cast< ::rokid::open::speech::v2::SpeechOptions*>(&::rokid::open::speech::v2::SpeechOptions::default_instance());
}

SpeechRequest::SpeechRequest(const SpeechRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rokid.open.speech.v2.SpeechRequest)
}

void SpeechRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  type_ = 0;
  voice_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  asr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  options_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SpeechRequest::~SpeechRequest() {
  // @@protoc_insertion_point(destructor:rokid.open.speech.v2.SpeechRequest)
  SharedDtor();
}

void SpeechRequest::SharedDtor() {
  if (voice_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete voice_;
  }
  if (asr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete asr_;
  }
  if (this != default_instance_) {
    delete options_;
  }
}

void SpeechRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SpeechRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SpeechRequest_descriptor_;
}

const SpeechRequest& SpeechRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_speech_2eproto();
  return *default_instance_;
}

SpeechRequest* SpeechRequest::default_instance_ = NULL;

SpeechRequest* SpeechRequest::New() const {
  return new SpeechRequest;
}

void SpeechRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SpeechRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(id_, type_);
    if (has_voice()) {
      if (voice_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        voice_->clear();
      }
    }
    if (has_asr()) {
      if (asr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        asr_->clear();
      }
    }
    if (has_options()) {
      if (options_ != NULL) options_->::rokid::open::speech::v2::SpeechOptions::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SpeechRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rokid.open.speech.v2.SpeechRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required .rokid.open.speech.v1.ReqType type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::rokid::open::speech::v1::ReqType_IsValid(value)) {
            set_type(static_cast< ::rokid::open::speech::v1::ReqType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_voice;
        break;
      }

      // optional bytes voice = 3;
      case 3: {
        if (tag == 26) {
         parse_voice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_voice()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_asr;
        break;
      }

      // optional string asr = 4;
      case 4: {
        if (tag == 34) {
         parse_asr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_asr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->asr().data(), this->asr().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "asr");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_options;
        break;
      }

      // optional .rokid.open.speech.v2.SpeechOptions options = 5;
      case 5: {
        if (tag == 42) {
         parse_options:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_options()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rokid.open.speech.v2.SpeechRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rokid.open.speech.v2.SpeechRequest)
  return false;
#undef DO_
}

void SpeechRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rokid.open.speech.v2.SpeechRequest)
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required .rokid.open.speech.v1.ReqType type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional bytes voice = 3;
  if (has_voice()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->voice(), output);
  }

  // optional string asr = 4;
  if (has_asr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->asr().data(), this->asr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "asr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->asr(), output);
  }

  // optional .rokid.open.speech.v2.SpeechOptions options = 5;
  if (has_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->options(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:rokid.open.speech.v2.SpeechRequest)
}

::google::protobuf::uint8* SpeechRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rokid.open.speech.v2.SpeechRequest)
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required .rokid.open.speech.v1.ReqType type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional bytes voice = 3;
  if (has_voice()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->voice(), target);
  }

  // optional string asr = 4;
  if (has_asr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->asr().data(), this->asr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "asr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->asr(), target);
  }

  // optional .rokid.open.speech.v2.SpeechOptions options = 5;
  if (has_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->options(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rokid.open.speech.v2.SpeechRequest)
  return target;
}

int SpeechRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required .rokid.open.speech.v1.ReqType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional bytes voice = 3;
    if (has_voice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->voice());
    }

    // optional string asr = 4;
    if (has_asr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->asr());
    }

    // optional .rokid.open.speech.v2.SpeechOptions options = 5;
    if (has_options()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->options());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpeechRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SpeechRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SpeechRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SpeechRequest::MergeFrom(const SpeechRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_voice()) {
      set_voice(from.voice());
    }
    if (from.has_asr()) {
      set_asr(from.asr());
    }
    if (from.has_options()) {
      mutable_options()->::rokid::open::speech::v2::SpeechOptions::MergeFrom(from.options());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SpeechRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpeechRequest::CopyFrom(const SpeechRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpeechRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_options()) {
    if (!this->options().IsInitialized()) return false;
  }
  return true;
}

void SpeechRequest::Swap(SpeechRequest* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(voice_, other->voice_);
    std::swap(asr_, other->asr_);
    std::swap(options_, other->options_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SpeechRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SpeechRequest_descriptor_;
  metadata.reflection = SpeechRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SpeechResponse::kIdFieldNumber;
const int SpeechResponse::kTypeFieldNumber;
const int SpeechResponse::kResultFieldNumber;
const int SpeechResponse::kAsrFieldNumber;
const int SpeechResponse::kNlpFieldNumber;
const int SpeechResponse::kActionFieldNumber;
const int SpeechResponse::kExtraFieldNumber;
#endif  // !_MSC_VER

SpeechResponse::SpeechResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rokid.open.speech.v2.SpeechResponse)
}

void SpeechResponse::InitAsDefaultInstance() {
}

SpeechResponse::SpeechResponse(const SpeechResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rokid.open.speech.v2.SpeechResponse)
}

void SpeechResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  type_ = 0;
  result_ = 0;
  asr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nlp_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  action_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  extra_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SpeechResponse::~SpeechResponse() {
  // @@protoc_insertion_point(destructor:rokid.open.speech.v2.SpeechResponse)
  SharedDtor();
}

void SpeechResponse::SharedDtor() {
  if (asr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete asr_;
  }
  if (nlp_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nlp_;
  }
  if (action_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete action_;
  }
  if (extra_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete extra_;
  }
  if (this != default_instance_) {
  }
}

void SpeechResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SpeechResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SpeechResponse_descriptor_;
}

const SpeechResponse& SpeechResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_speech_2eproto();
  return *default_instance_;
}

SpeechResponse* SpeechResponse::default_instance_ = NULL;

SpeechResponse* SpeechResponse::New() const {
  return new SpeechResponse;
}

void SpeechResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SpeechResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(id_, type_);
    result_ = 0;
    if (has_asr()) {
      if (asr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        asr_->clear();
      }
    }
    if (has_nlp()) {
      if (nlp_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        nlp_->clear();
      }
    }
    if (has_action()) {
      if (action_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        action_->clear();
      }
    }
    if (has_extra()) {
      if (extra_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        extra_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SpeechResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rokid.open.speech.v2.SpeechResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required .rokid.open.speech.v2.RespType type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::rokid::open::speech::v2::RespType_IsValid(value)) {
            set_type(static_cast< ::rokid::open::speech::v2::RespType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }

      // required .rokid.open.speech.v1.SpeechErrorCode result = 3;
      case 3: {
        if (tag == 24) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::rokid::open::speech::v1::SpeechErrorCode_IsValid(value)) {
            set_result(static_cast< ::rokid::open::speech::v1::SpeechErrorCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_asr;
        break;
      }

      // optional string asr = 4;
      case 4: {
        if (tag == 34) {
         parse_asr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_asr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->asr().data(), this->asr().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "asr");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_nlp;
        break;
      }

      // optional string nlp = 5;
      case 5: {
        if (tag == 42) {
         parse_nlp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nlp()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nlp().data(), this->nlp().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "nlp");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_action;
        break;
      }

      // optional string action = 6;
      case 6: {
        if (tag == 50) {
         parse_action:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_action()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->action().data(), this->action().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "action");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_extra;
        break;
      }

      // optional string extra = 7;
      case 7: {
        if (tag == 58) {
         parse_extra:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_extra()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->extra().data(), this->extra().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "extra");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rokid.open.speech.v2.SpeechResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rokid.open.speech.v2.SpeechResponse)
  return false;
#undef DO_
}

void SpeechResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rokid.open.speech.v2.SpeechResponse)
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required .rokid.open.speech.v2.RespType type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // required .rokid.open.speech.v1.SpeechErrorCode result = 3;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->result(), output);
  }

  // optional string asr = 4;
  if (has_asr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->asr().data(), this->asr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "asr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->asr(), output);
  }

  // optional string nlp = 5;
  if (has_nlp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nlp().data(), this->nlp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nlp");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->nlp(), output);
  }

  // optional string action = 6;
  if (has_action()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->action().data(), this->action().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "action");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->action(), output);
  }

  // optional string extra = 7;
  if (has_extra()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->extra().data(), this->extra().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "extra");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->extra(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:rokid.open.speech.v2.SpeechResponse)
}

::google::protobuf::uint8* SpeechResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rokid.open.speech.v2.SpeechResponse)
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required .rokid.open.speech.v2.RespType type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // required .rokid.open.speech.v1.SpeechErrorCode result = 3;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->result(), target);
  }

  // optional string asr = 4;
  if (has_asr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->asr().data(), this->asr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "asr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->asr(), target);
  }

  // optional string nlp = 5;
  if (has_nlp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nlp().data(), this->nlp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nlp");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->nlp(), target);
  }

  // optional string action = 6;
  if (has_action()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->action().data(), this->action().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "action");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->action(), target);
  }

  // optional string extra = 7;
  if (has_extra()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->extra().data(), this->extra().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "extra");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->extra(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rokid.open.speech.v2.SpeechResponse)
  return target;
}

int SpeechResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required .rokid.open.speech.v2.RespType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required .rokid.open.speech.v1.SpeechErrorCode result = 3;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional string asr = 4;
    if (has_asr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->asr());
    }

    // optional string nlp = 5;
    if (has_nlp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nlp());
    }

    // optional string action = 6;
    if (has_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->action());
    }

    // optional string extra = 7;
    if (has_extra()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->extra());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpeechResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SpeechResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SpeechResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SpeechResponse::MergeFrom(const SpeechResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_asr()) {
      set_asr(from.asr());
    }
    if (from.has_nlp()) {
      set_nlp(from.nlp());
    }
    if (from.has_action()) {
      set_action(from.action());
    }
    if (from.has_extra()) {
      set_extra(from.extra());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SpeechResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpeechResponse::CopyFrom(const SpeechResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpeechResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void SpeechResponse::Swap(SpeechResponse* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(result_, other->result_);
    std::swap(asr_, other->asr_);
    std::swap(nlp_, other->nlp_);
    std::swap(action_, other->action_);
    std::swap(extra_, other->extra_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SpeechResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SpeechResponse_descriptor_;
  metadata.reflection = SpeechResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace v2
}  // namespace speech
}  // namespace open
}  // namespace rokid

// @@protoc_insertion_point(global_scope)
