// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: speech.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "speech.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace rokid {
namespace open {

namespace {

const ::google::protobuf::Descriptor* AuthRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AuthRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* AuthResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AuthResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* AsrRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AsrRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* AsrResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AsrResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* TtsRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TtsRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* TtsResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TtsResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* SpeechRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SpeechRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SpeechResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SpeechResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SpeechErrorCode_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ReqType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_speech_2eproto() {
  protobuf_AddDesc_speech_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "speech.proto");
  GOOGLE_CHECK(file != NULL);
  AuthRequest_descriptor_ = file->message_type(0);
  static const int AuthRequest_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthRequest, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthRequest, device_type_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthRequest, device_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthRequest, service_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthRequest, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthRequest, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthRequest, sign_),
  };
  AuthRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AuthRequest_descriptor_,
      AuthRequest::default_instance_,
      AuthRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AuthRequest));
  AuthResponse_descriptor_ = file->message_type(1);
  static const int AuthResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthResponse, result_),
  };
  AuthResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AuthResponse_descriptor_,
      AuthResponse::default_instance_,
      AuthResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AuthResponse));
  AsrRequest_descriptor_ = file->message_type(2);
  static const int AsrRequest_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AsrRequest, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AsrRequest, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AsrRequest, voice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AsrRequest, lang_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AsrRequest, codec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AsrRequest, vt_),
  };
  AsrRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AsrRequest_descriptor_,
      AsrRequest::default_instance_,
      AsrRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AsrRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AsrRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AsrRequest));
  AsrResponse_descriptor_ = file->message_type(3);
  static const int AsrResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AsrResponse, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AsrResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AsrResponse, asr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AsrResponse, finish_),
  };
  AsrResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AsrResponse_descriptor_,
      AsrResponse::default_instance_,
      AsrResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AsrResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AsrResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AsrResponse));
  TtsRequest_descriptor_ = file->message_type(4);
  static const int TtsRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TtsRequest, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TtsRequest, text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TtsRequest, declaimer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TtsRequest, codec_),
  };
  TtsRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TtsRequest_descriptor_,
      TtsRequest::default_instance_,
      TtsRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TtsRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TtsRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TtsRequest));
  TtsResponse_descriptor_ = file->message_type(5);
  static const int TtsResponse_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TtsResponse, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TtsResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TtsResponse, text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TtsResponse, voice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TtsResponse, finish_),
  };
  TtsResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TtsResponse_descriptor_,
      TtsResponse::default_instance_,
      TtsResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TtsResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TtsResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TtsResponse));
  SpeechRequest_descriptor_ = file->message_type(6);
  static const int SpeechRequest_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeechRequest, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeechRequest, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeechRequest, voice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeechRequest, asr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeechRequest, lang_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeechRequest, codec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeechRequest, vt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeechRequest, framework_options_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeechRequest, skill_options_),
  };
  SpeechRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SpeechRequest_descriptor_,
      SpeechRequest::default_instance_,
      SpeechRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeechRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeechRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SpeechRequest));
  SpeechResponse_descriptor_ = file->message_type(7);
  static const int SpeechResponse_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeechResponse, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeechResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeechResponse, asr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeechResponse, nlp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeechResponse, action_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeechResponse, finish_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeechResponse, extra_),
  };
  SpeechResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SpeechResponse_descriptor_,
      SpeechResponse::default_instance_,
      SpeechResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeechResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeechResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SpeechResponse));
  SpeechErrorCode_descriptor_ = file->enum_type(0);
  ReqType_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_speech_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AuthRequest_descriptor_, &AuthRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AuthResponse_descriptor_, &AuthResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AsrRequest_descriptor_, &AsrRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AsrResponse_descriptor_, &AsrResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TtsRequest_descriptor_, &TtsRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TtsResponse_descriptor_, &TtsResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SpeechRequest_descriptor_, &SpeechRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SpeechResponse_descriptor_, &SpeechResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_speech_2eproto() {
  delete AuthRequest::default_instance_;
  delete AuthRequest_reflection_;
  delete AuthResponse::default_instance_;
  delete AuthResponse_reflection_;
  delete AsrRequest::default_instance_;
  delete AsrRequest_reflection_;
  delete AsrResponse::default_instance_;
  delete AsrResponse_reflection_;
  delete TtsRequest::default_instance_;
  delete TtsRequest_reflection_;
  delete TtsResponse::default_instance_;
  delete TtsResponse_reflection_;
  delete SpeechRequest::default_instance_;
  delete SpeechRequest_reflection_;
  delete SpeechResponse::default_instance_;
  delete SpeechResponse_reflection_;
}

void protobuf_AddDesc_speech_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014speech.proto\022\nrokid.open\"\210\001\n\013AuthReque"
    "st\022\013\n\003key\030\001 \002(\t\022\026\n\016device_type_id\030\002 \002(\t\022"
    "\021\n\tdevice_id\030\003 \002(\t\022\017\n\007service\030\004 \002(\t\022\017\n\007v"
    "ersion\030\005 \002(\t\022\021\n\ttimestamp\030\006 \002(\t\022\014\n\004sign\030"
    "\007 \002(\t\";\n\014AuthResponse\022+\n\006result\030\001 \002(\0162\033."
    "rokid.open.SpeechErrorCode\"s\n\nAsrRequest"
    "\022\n\n\002id\030\001 \002(\005\022!\n\004type\030\002 \002(\0162\023.rokid.open."
    "ReqType\022\r\n\005voice\030\003 \001(\014\022\014\n\004lang\030\004 \001(\t\022\r\n\005"
    "codec\030\005 \001(\t\022\n\n\002vt\030\006 \001(\t\"c\n\013AsrResponse\022\n"
    "\n\002id\030\001 \002(\005\022+\n\006result\030\002 \002(\0162\033.rokid.open."
    "SpeechErrorCode\022\013\n\003asr\030\003 \001(\t\022\016\n\006finish\030\004"
    " \001(\010\"H\n\nTtsRequest\022\n\n\002id\030\001 \002(\005\022\014\n\004text\030\002"
    " \002(\t\022\021\n\tdeclaimer\030\003 \001(\t\022\r\n\005codec\030\004 \001(\t\"s"
    "\n\013TtsResponse\022\n\n\002id\030\001 \002(\005\022+\n\006result\030\002 \002("
    "\0162\033.rokid.open.SpeechErrorCode\022\014\n\004text\030\003"
    " \001(\t\022\r\n\005voice\030\004 \001(\014\022\016\n\006finish\030\005 \001(\010\"\265\001\n\r"
    "SpeechRequest\022\n\n\002id\030\001 \002(\005\022!\n\004type\030\002 \002(\0162"
    "\023.rokid.open.ReqType\022\r\n\005voice\030\003 \001(\014\022\013\n\003a"
    "sr\030\004 \001(\t\022\014\n\004lang\030\005 \001(\t\022\r\n\005codec\030\006 \001(\t\022\n\n"
    "\002vt\030\007 \001(\t\022\031\n\021framework_options\030\010 \001(\t\022\025\n\r"
    "skill_options\030\t \001(\t\"\222\001\n\016SpeechResponse\022\n"
    "\n\002id\030\001 \002(\005\022+\n\006result\030\002 \002(\0162\033.rokid.open."
    "SpeechErrorCode\022\013\n\003asr\030\003 \001(\t\022\013\n\003nlp\030\004 \001("
    "\t\022\016\n\006action\030\005 \001(\t\022\016\n\006finish\030\006 \001(\010\022\r\n\005ext"
    "ra\030\007 \001(\t*\212\001\n\017SpeechErrorCode\022\013\n\007SUCCESS\020"
    "\000\022\017\n\013AUTH_FAILED\020\001\022\023\n\017UNAUTHENTICATED\020\002\022"
    "\025\n\021CONNECTION_EXCEED\020\003\022\025\n\021RESOURCE_EXHAS"
    "TED\020\004\022\010\n\004BUSY\020\005\022\014\n\010INTERNAL\020\006*2\n\007ReqType"
    "\022\t\n\005START\020\000\022\t\n\005VOICE\020\001\022\007\n\003END\020\002\022\010\n\004TEXT\020"
    "\003", 1161);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "speech.proto", &protobuf_RegisterTypes);
  AuthRequest::default_instance_ = new AuthRequest();
  AuthResponse::default_instance_ = new AuthResponse();
  AsrRequest::default_instance_ = new AsrRequest();
  AsrResponse::default_instance_ = new AsrResponse();
  TtsRequest::default_instance_ = new TtsRequest();
  TtsResponse::default_instance_ = new TtsResponse();
  SpeechRequest::default_instance_ = new SpeechRequest();
  SpeechResponse::default_instance_ = new SpeechResponse();
  AuthRequest::default_instance_->InitAsDefaultInstance();
  AuthResponse::default_instance_->InitAsDefaultInstance();
  AsrRequest::default_instance_->InitAsDefaultInstance();
  AsrResponse::default_instance_->InitAsDefaultInstance();
  TtsRequest::default_instance_->InitAsDefaultInstance();
  TtsResponse::default_instance_->InitAsDefaultInstance();
  SpeechRequest::default_instance_->InitAsDefaultInstance();
  SpeechResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_speech_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_speech_2eproto {
  StaticDescriptorInitializer_speech_2eproto() {
    protobuf_AddDesc_speech_2eproto();
  }
} static_descriptor_initializer_speech_2eproto_;
const ::google::protobuf::EnumDescriptor* SpeechErrorCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SpeechErrorCode_descriptor_;
}
bool SpeechErrorCode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ReqType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqType_descriptor_;
}
bool ReqType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int AuthRequest::kKeyFieldNumber;
const int AuthRequest::kDeviceTypeIdFieldNumber;
const int AuthRequest::kDeviceIdFieldNumber;
const int AuthRequest::kServiceFieldNumber;
const int AuthRequest::kVersionFieldNumber;
const int AuthRequest::kTimestampFieldNumber;
const int AuthRequest::kSignFieldNumber;
#endif  // !_MSC_VER

AuthRequest::AuthRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rokid.open.AuthRequest)
}

void AuthRequest::InitAsDefaultInstance() {
}

AuthRequest::AuthRequest(const AuthRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rokid.open.AuthRequest)
}

void AuthRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_type_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  service_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sign_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AuthRequest::~AuthRequest() {
  // @@protoc_insertion_point(destructor:rokid.open.AuthRequest)
  SharedDtor();
}

void AuthRequest::SharedDtor() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (device_type_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete device_type_id_;
  }
  if (device_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete device_id_;
  }
  if (service_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete service_;
  }
  if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete version_;
  }
  if (timestamp_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete timestamp_;
  }
  if (sign_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sign_;
  }
  if (this != default_instance_) {
  }
}

void AuthRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuthRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AuthRequest_descriptor_;
}

const AuthRequest& AuthRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_speech_2eproto();
  return *default_instance_;
}

AuthRequest* AuthRequest::default_instance_ = NULL;

AuthRequest* AuthRequest::New() const {
  return new AuthRequest;
}

void AuthRequest::Clear() {
  if (_has_bits_[0 / 32] & 127) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        key_->clear();
      }
    }
    if (has_device_type_id()) {
      if (device_type_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        device_type_id_->clear();
      }
    }
    if (has_device_id()) {
      if (device_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        device_id_->clear();
      }
    }
    if (has_service()) {
      if (service_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        service_->clear();
      }
    }
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        version_->clear();
      }
    }
    if (has_timestamp()) {
      if (timestamp_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        timestamp_->clear();
      }
    }
    if (has_sign()) {
      if (sign_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sign_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AuthRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rokid.open.AuthRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_device_type_id;
        break;
      }

      // required string device_type_id = 2;
      case 2: {
        if (tag == 18) {
         parse_device_type_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_type_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->device_type_id().data(), this->device_type_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "device_type_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_device_id;
        break;
      }

      // required string device_id = 3;
      case 3: {
        if (tag == 26) {
         parse_device_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->device_id().data(), this->device_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "device_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_service;
        break;
      }

      // required string service = 4;
      case 4: {
        if (tag == 34) {
         parse_service:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_service()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->service().data(), this->service().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "service");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_version;
        break;
      }

      // required string version = 5;
      case 5: {
        if (tag == 42) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "version");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_timestamp;
        break;
      }

      // required string timestamp = 6;
      case 6: {
        if (tag == 50) {
         parse_timestamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_timestamp()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->timestamp().data(), this->timestamp().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "timestamp");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_sign;
        break;
      }

      // required string sign = 7;
      case 7: {
        if (tag == 58) {
         parse_sign:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sign()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sign().data(), this->sign().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sign");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rokid.open.AuthRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rokid.open.AuthRequest)
  return false;
#undef DO_
}

void AuthRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rokid.open.AuthRequest)
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // required string device_type_id = 2;
  if (has_device_type_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->device_type_id().data(), this->device_type_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "device_type_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->device_type_id(), output);
  }

  // required string device_id = 3;
  if (has_device_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->device_id().data(), this->device_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "device_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->device_id(), output);
  }

  // required string service = 4;
  if (has_service()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->service().data(), this->service().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "service");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->service(), output);
  }

  // required string version = 5;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->version(), output);
  }

  // required string timestamp = 6;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->timestamp().data(), this->timestamp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "timestamp");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->timestamp(), output);
  }

  // required string sign = 7;
  if (has_sign()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sign().data(), this->sign().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sign");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->sign(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:rokid.open.AuthRequest)
}

::google::protobuf::uint8* AuthRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rokid.open.AuthRequest)
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // required string device_type_id = 2;
  if (has_device_type_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->device_type_id().data(), this->device_type_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "device_type_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->device_type_id(), target);
  }

  // required string device_id = 3;
  if (has_device_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->device_id().data(), this->device_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "device_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->device_id(), target);
  }

  // required string service = 4;
  if (has_service()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->service().data(), this->service().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "service");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->service(), target);
  }

  // required string version = 5;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->version(), target);
  }

  // required string timestamp = 6;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->timestamp().data(), this->timestamp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "timestamp");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->timestamp(), target);
  }

  // required string sign = 7;
  if (has_sign()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sign().data(), this->sign().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sign");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->sign(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rokid.open.AuthRequest)
  return target;
}

int AuthRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // required string device_type_id = 2;
    if (has_device_type_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device_type_id());
    }

    // required string device_id = 3;
    if (has_device_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device_id());
    }

    // required string service = 4;
    if (has_service()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->service());
    }

    // required string version = 5;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }

    // required string timestamp = 6;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->timestamp());
    }

    // required string sign = 7;
    if (has_sign()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sign());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuthRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AuthRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AuthRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AuthRequest::MergeFrom(const AuthRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_device_type_id()) {
      set_device_type_id(from.device_type_id());
    }
    if (from.has_device_id()) {
      set_device_id(from.device_id());
    }
    if (from.has_service()) {
      set_service(from.service());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_sign()) {
      set_sign(from.sign());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AuthRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthRequest::CopyFrom(const AuthRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void AuthRequest::Swap(AuthRequest* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(device_type_id_, other->device_type_id_);
    std::swap(device_id_, other->device_id_);
    std::swap(service_, other->service_);
    std::swap(version_, other->version_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(sign_, other->sign_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AuthRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AuthRequest_descriptor_;
  metadata.reflection = AuthRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AuthResponse::kResultFieldNumber;
#endif  // !_MSC_VER

AuthResponse::AuthResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rokid.open.AuthResponse)
}

void AuthResponse::InitAsDefaultInstance() {
}

AuthResponse::AuthResponse(const AuthResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rokid.open.AuthResponse)
}

void AuthResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AuthResponse::~AuthResponse() {
  // @@protoc_insertion_point(destructor:rokid.open.AuthResponse)
  SharedDtor();
}

void AuthResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AuthResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuthResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AuthResponse_descriptor_;
}

const AuthResponse& AuthResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_speech_2eproto();
  return *default_instance_;
}

AuthResponse* AuthResponse::default_instance_ = NULL;

AuthResponse* AuthResponse::New() const {
  return new AuthResponse;
}

void AuthResponse::Clear() {
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AuthResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rokid.open.AuthResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .rokid.open.SpeechErrorCode result = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::rokid::open::SpeechErrorCode_IsValid(value)) {
            set_result(static_cast< ::rokid::open::SpeechErrorCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rokid.open.AuthResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rokid.open.AuthResponse)
  return false;
#undef DO_
}

void AuthResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rokid.open.AuthResponse)
  // required .rokid.open.SpeechErrorCode result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:rokid.open.AuthResponse)
}

::google::protobuf::uint8* AuthResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rokid.open.AuthResponse)
  // required .rokid.open.SpeechErrorCode result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rokid.open.AuthResponse)
  return target;
}

int AuthResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .rokid.open.SpeechErrorCode result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuthResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AuthResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AuthResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AuthResponse::MergeFrom(const AuthResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AuthResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthResponse::CopyFrom(const AuthResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AuthResponse::Swap(AuthResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AuthResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AuthResponse_descriptor_;
  metadata.reflection = AuthResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AsrRequest::kIdFieldNumber;
const int AsrRequest::kTypeFieldNumber;
const int AsrRequest::kVoiceFieldNumber;
const int AsrRequest::kLangFieldNumber;
const int AsrRequest::kCodecFieldNumber;
const int AsrRequest::kVtFieldNumber;
#endif  // !_MSC_VER

AsrRequest::AsrRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rokid.open.AsrRequest)
}

void AsrRequest::InitAsDefaultInstance() {
}

AsrRequest::AsrRequest(const AsrRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rokid.open.AsrRequest)
}

void AsrRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  type_ = 0;
  voice_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lang_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  codec_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vt_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AsrRequest::~AsrRequest() {
  // @@protoc_insertion_point(destructor:rokid.open.AsrRequest)
  SharedDtor();
}

void AsrRequest::SharedDtor() {
  if (voice_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete voice_;
  }
  if (lang_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete lang_;
  }
  if (codec_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete codec_;
  }
  if (vt_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete vt_;
  }
  if (this != default_instance_) {
  }
}

void AsrRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AsrRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AsrRequest_descriptor_;
}

const AsrRequest& AsrRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_speech_2eproto();
  return *default_instance_;
}

AsrRequest* AsrRequest::default_instance_ = NULL;

AsrRequest* AsrRequest::New() const {
  return new AsrRequest;
}

void AsrRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AsrRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(id_, type_);
    if (has_voice()) {
      if (voice_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        voice_->clear();
      }
    }
    if (has_lang()) {
      if (lang_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        lang_->clear();
      }
    }
    if (has_codec()) {
      if (codec_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        codec_->clear();
      }
    }
    if (has_vt()) {
      if (vt_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        vt_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AsrRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rokid.open.AsrRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required .rokid.open.ReqType type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::rokid::open::ReqType_IsValid(value)) {
            set_type(static_cast< ::rokid::open::ReqType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_voice;
        break;
      }

      // optional bytes voice = 3;
      case 3: {
        if (tag == 26) {
         parse_voice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_voice()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_lang;
        break;
      }

      // optional string lang = 4;
      case 4: {
        if (tag == 34) {
         parse_lang:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lang()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->lang().data(), this->lang().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "lang");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_codec;
        break;
      }

      // optional string codec = 5;
      case 5: {
        if (tag == 42) {
         parse_codec:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_codec()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->codec().data(), this->codec().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "codec");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_vt;
        break;
      }

      // optional string vt = 6;
      case 6: {
        if (tag == 50) {
         parse_vt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vt()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->vt().data(), this->vt().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "vt");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rokid.open.AsrRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rokid.open.AsrRequest)
  return false;
#undef DO_
}

void AsrRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rokid.open.AsrRequest)
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required .rokid.open.ReqType type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional bytes voice = 3;
  if (has_voice()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->voice(), output);
  }

  // optional string lang = 4;
  if (has_lang()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lang().data(), this->lang().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "lang");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->lang(), output);
  }

  // optional string codec = 5;
  if (has_codec()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->codec().data(), this->codec().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "codec");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->codec(), output);
  }

  // optional string vt = 6;
  if (has_vt()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vt().data(), this->vt().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "vt");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->vt(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:rokid.open.AsrRequest)
}

::google::protobuf::uint8* AsrRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rokid.open.AsrRequest)
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required .rokid.open.ReqType type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional bytes voice = 3;
  if (has_voice()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->voice(), target);
  }

  // optional string lang = 4;
  if (has_lang()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lang().data(), this->lang().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "lang");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->lang(), target);
  }

  // optional string codec = 5;
  if (has_codec()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->codec().data(), this->codec().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "codec");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->codec(), target);
  }

  // optional string vt = 6;
  if (has_vt()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vt().data(), this->vt().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "vt");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->vt(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rokid.open.AsrRequest)
  return target;
}

int AsrRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required .rokid.open.ReqType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional bytes voice = 3;
    if (has_voice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->voice());
    }

    // optional string lang = 4;
    if (has_lang()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lang());
    }

    // optional string codec = 5;
    if (has_codec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->codec());
    }

    // optional string vt = 6;
    if (has_vt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->vt());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AsrRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AsrRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AsrRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AsrRequest::MergeFrom(const AsrRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_voice()) {
      set_voice(from.voice());
    }
    if (from.has_lang()) {
      set_lang(from.lang());
    }
    if (from.has_codec()) {
      set_codec(from.codec());
    }
    if (from.has_vt()) {
      set_vt(from.vt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AsrRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AsrRequest::CopyFrom(const AsrRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AsrRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void AsrRequest::Swap(AsrRequest* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(voice_, other->voice_);
    std::swap(lang_, other->lang_);
    std::swap(codec_, other->codec_);
    std::swap(vt_, other->vt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AsrRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AsrRequest_descriptor_;
  metadata.reflection = AsrRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AsrResponse::kIdFieldNumber;
const int AsrResponse::kResultFieldNumber;
const int AsrResponse::kAsrFieldNumber;
const int AsrResponse::kFinishFieldNumber;
#endif  // !_MSC_VER

AsrResponse::AsrResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rokid.open.AsrResponse)
}

void AsrResponse::InitAsDefaultInstance() {
}

AsrResponse::AsrResponse(const AsrResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rokid.open.AsrResponse)
}

void AsrResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  result_ = 0;
  asr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  finish_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AsrResponse::~AsrResponse() {
  // @@protoc_insertion_point(destructor:rokid.open.AsrResponse)
  SharedDtor();
}

void AsrResponse::SharedDtor() {
  if (asr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete asr_;
  }
  if (this != default_instance_) {
  }
}

void AsrResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AsrResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AsrResponse_descriptor_;
}

const AsrResponse& AsrResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_speech_2eproto();
  return *default_instance_;
}

AsrResponse* AsrResponse::default_instance_ = NULL;

AsrResponse* AsrResponse::New() const {
  return new AsrResponse;
}

void AsrResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AsrResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(id_, result_);
    if (has_asr()) {
      if (asr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        asr_->clear();
      }
    }
    finish_ = false;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AsrResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rokid.open.AsrResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // required .rokid.open.SpeechErrorCode result = 2;
      case 2: {
        if (tag == 16) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::rokid::open::SpeechErrorCode_IsValid(value)) {
            set_result(static_cast< ::rokid::open::SpeechErrorCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_asr;
        break;
      }

      // optional string asr = 3;
      case 3: {
        if (tag == 26) {
         parse_asr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_asr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->asr().data(), this->asr().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "asr");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_finish;
        break;
      }

      // optional bool finish = 4;
      case 4: {
        if (tag == 32) {
         parse_finish:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &finish_)));
          set_has_finish();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rokid.open.AsrResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rokid.open.AsrResponse)
  return false;
#undef DO_
}

void AsrResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rokid.open.AsrResponse)
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required .rokid.open.SpeechErrorCode result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  // optional string asr = 3;
  if (has_asr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->asr().data(), this->asr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "asr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->asr(), output);
  }

  // optional bool finish = 4;
  if (has_finish()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->finish(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:rokid.open.AsrResponse)
}

::google::protobuf::uint8* AsrResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rokid.open.AsrResponse)
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required .rokid.open.SpeechErrorCode result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  // optional string asr = 3;
  if (has_asr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->asr().data(), this->asr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "asr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->asr(), target);
  }

  // optional bool finish = 4;
  if (has_finish()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->finish(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rokid.open.AsrResponse)
  return target;
}

int AsrResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required .rokid.open.SpeechErrorCode result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional string asr = 3;
    if (has_asr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->asr());
    }

    // optional bool finish = 4;
    if (has_finish()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AsrResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AsrResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AsrResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AsrResponse::MergeFrom(const AsrResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_asr()) {
      set_asr(from.asr());
    }
    if (from.has_finish()) {
      set_finish(from.finish());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AsrResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AsrResponse::CopyFrom(const AsrResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AsrResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void AsrResponse::Swap(AsrResponse* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(result_, other->result_);
    std::swap(asr_, other->asr_);
    std::swap(finish_, other->finish_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AsrResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AsrResponse_descriptor_;
  metadata.reflection = AsrResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TtsRequest::kIdFieldNumber;
const int TtsRequest::kTextFieldNumber;
const int TtsRequest::kDeclaimerFieldNumber;
const int TtsRequest::kCodecFieldNumber;
#endif  // !_MSC_VER

TtsRequest::TtsRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rokid.open.TtsRequest)
}

void TtsRequest::InitAsDefaultInstance() {
}

TtsRequest::TtsRequest(const TtsRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rokid.open.TtsRequest)
}

void TtsRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  declaimer_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  codec_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TtsRequest::~TtsRequest() {
  // @@protoc_insertion_point(destructor:rokid.open.TtsRequest)
  SharedDtor();
}

void TtsRequest::SharedDtor() {
  if (text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete text_;
  }
  if (declaimer_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete declaimer_;
  }
  if (codec_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete codec_;
  }
  if (this != default_instance_) {
  }
}

void TtsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TtsRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TtsRequest_descriptor_;
}

const TtsRequest& TtsRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_speech_2eproto();
  return *default_instance_;
}

TtsRequest* TtsRequest::default_instance_ = NULL;

TtsRequest* TtsRequest::New() const {
  return new TtsRequest;
}

void TtsRequest::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    id_ = 0;
    if (has_text()) {
      if (text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        text_->clear();
      }
    }
    if (has_declaimer()) {
      if (declaimer_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        declaimer_->clear();
      }
    }
    if (has_codec()) {
      if (codec_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        codec_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TtsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rokid.open.TtsRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_text;
        break;
      }

      // required string text = 2;
      case 2: {
        if (tag == 18) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "text");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_declaimer;
        break;
      }

      // optional string declaimer = 3;
      case 3: {
        if (tag == 26) {
         parse_declaimer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_declaimer()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->declaimer().data(), this->declaimer().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "declaimer");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_codec;
        break;
      }

      // optional string codec = 4;
      case 4: {
        if (tag == 34) {
         parse_codec:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_codec()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->codec().data(), this->codec().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "codec");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rokid.open.TtsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rokid.open.TtsRequest)
  return false;
#undef DO_
}

void TtsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rokid.open.TtsRequest)
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required string text = 2;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->text(), output);
  }

  // optional string declaimer = 3;
  if (has_declaimer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->declaimer().data(), this->declaimer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "declaimer");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->declaimer(), output);
  }

  // optional string codec = 4;
  if (has_codec()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->codec().data(), this->codec().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "codec");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->codec(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:rokid.open.TtsRequest)
}

::google::protobuf::uint8* TtsRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rokid.open.TtsRequest)
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required string text = 2;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->text(), target);
  }

  // optional string declaimer = 3;
  if (has_declaimer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->declaimer().data(), this->declaimer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "declaimer");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->declaimer(), target);
  }

  // optional string codec = 4;
  if (has_codec()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->codec().data(), this->codec().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "codec");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->codec(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rokid.open.TtsRequest)
  return target;
}

int TtsRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required string text = 2;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

    // optional string declaimer = 3;
    if (has_declaimer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->declaimer());
    }

    // optional string codec = 4;
    if (has_codec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->codec());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TtsRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TtsRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TtsRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TtsRequest::MergeFrom(const TtsRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_text()) {
      set_text(from.text());
    }
    if (from.has_declaimer()) {
      set_declaimer(from.declaimer());
    }
    if (from.has_codec()) {
      set_codec(from.codec());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TtsRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TtsRequest::CopyFrom(const TtsRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TtsRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void TtsRequest::Swap(TtsRequest* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(text_, other->text_);
    std::swap(declaimer_, other->declaimer_);
    std::swap(codec_, other->codec_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TtsRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TtsRequest_descriptor_;
  metadata.reflection = TtsRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TtsResponse::kIdFieldNumber;
const int TtsResponse::kResultFieldNumber;
const int TtsResponse::kTextFieldNumber;
const int TtsResponse::kVoiceFieldNumber;
const int TtsResponse::kFinishFieldNumber;
#endif  // !_MSC_VER

TtsResponse::TtsResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rokid.open.TtsResponse)
}

void TtsResponse::InitAsDefaultInstance() {
}

TtsResponse::TtsResponse(const TtsResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rokid.open.TtsResponse)
}

void TtsResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  result_ = 0;
  text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  voice_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  finish_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TtsResponse::~TtsResponse() {
  // @@protoc_insertion_point(destructor:rokid.open.TtsResponse)
  SharedDtor();
}

void TtsResponse::SharedDtor() {
  if (text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete text_;
  }
  if (voice_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete voice_;
  }
  if (this != default_instance_) {
  }
}

void TtsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TtsResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TtsResponse_descriptor_;
}

const TtsResponse& TtsResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_speech_2eproto();
  return *default_instance_;
}

TtsResponse* TtsResponse::default_instance_ = NULL;

TtsResponse* TtsResponse::New() const {
  return new TtsResponse;
}

void TtsResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TtsResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(id_, result_);
    if (has_text()) {
      if (text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        text_->clear();
      }
    }
    if (has_voice()) {
      if (voice_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        voice_->clear();
      }
    }
    finish_ = false;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TtsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rokid.open.TtsResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // required .rokid.open.SpeechErrorCode result = 2;
      case 2: {
        if (tag == 16) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::rokid::open::SpeechErrorCode_IsValid(value)) {
            set_result(static_cast< ::rokid::open::SpeechErrorCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_text;
        break;
      }

      // optional string text = 3;
      case 3: {
        if (tag == 26) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "text");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_voice;
        break;
      }

      // optional bytes voice = 4;
      case 4: {
        if (tag == 34) {
         parse_voice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_voice()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_finish;
        break;
      }

      // optional bool finish = 5;
      case 5: {
        if (tag == 40) {
         parse_finish:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &finish_)));
          set_has_finish();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rokid.open.TtsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rokid.open.TtsResponse)
  return false;
#undef DO_
}

void TtsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rokid.open.TtsResponse)
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required .rokid.open.SpeechErrorCode result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  // optional string text = 3;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->text(), output);
  }

  // optional bytes voice = 4;
  if (has_voice()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->voice(), output);
  }

  // optional bool finish = 5;
  if (has_finish()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->finish(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:rokid.open.TtsResponse)
}

::google::protobuf::uint8* TtsResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rokid.open.TtsResponse)
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required .rokid.open.SpeechErrorCode result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  // optional string text = 3;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->text(), target);
  }

  // optional bytes voice = 4;
  if (has_voice()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->voice(), target);
  }

  // optional bool finish = 5;
  if (has_finish()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->finish(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rokid.open.TtsResponse)
  return target;
}

int TtsResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required .rokid.open.SpeechErrorCode result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional string text = 3;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

    // optional bytes voice = 4;
    if (has_voice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->voice());
    }

    // optional bool finish = 5;
    if (has_finish()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TtsResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TtsResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TtsResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TtsResponse::MergeFrom(const TtsResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_text()) {
      set_text(from.text());
    }
    if (from.has_voice()) {
      set_voice(from.voice());
    }
    if (from.has_finish()) {
      set_finish(from.finish());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TtsResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TtsResponse::CopyFrom(const TtsResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TtsResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void TtsResponse::Swap(TtsResponse* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(result_, other->result_);
    std::swap(text_, other->text_);
    std::swap(voice_, other->voice_);
    std::swap(finish_, other->finish_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TtsResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TtsResponse_descriptor_;
  metadata.reflection = TtsResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SpeechRequest::kIdFieldNumber;
const int SpeechRequest::kTypeFieldNumber;
const int SpeechRequest::kVoiceFieldNumber;
const int SpeechRequest::kAsrFieldNumber;
const int SpeechRequest::kLangFieldNumber;
const int SpeechRequest::kCodecFieldNumber;
const int SpeechRequest::kVtFieldNumber;
const int SpeechRequest::kFrameworkOptionsFieldNumber;
const int SpeechRequest::kSkillOptionsFieldNumber;
#endif  // !_MSC_VER

SpeechRequest::SpeechRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rokid.open.SpeechRequest)
}

void SpeechRequest::InitAsDefaultInstance() {
}

SpeechRequest::SpeechRequest(const SpeechRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rokid.open.SpeechRequest)
}

void SpeechRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  type_ = 0;
  voice_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  asr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lang_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  codec_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vt_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  framework_options_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  skill_options_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SpeechRequest::~SpeechRequest() {
  // @@protoc_insertion_point(destructor:rokid.open.SpeechRequest)
  SharedDtor();
}

void SpeechRequest::SharedDtor() {
  if (voice_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete voice_;
  }
  if (asr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete asr_;
  }
  if (lang_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete lang_;
  }
  if (codec_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete codec_;
  }
  if (vt_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete vt_;
  }
  if (framework_options_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete framework_options_;
  }
  if (skill_options_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete skill_options_;
  }
  if (this != default_instance_) {
  }
}

void SpeechRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SpeechRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SpeechRequest_descriptor_;
}

const SpeechRequest& SpeechRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_speech_2eproto();
  return *default_instance_;
}

SpeechRequest* SpeechRequest::default_instance_ = NULL;

SpeechRequest* SpeechRequest::New() const {
  return new SpeechRequest;
}

void SpeechRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SpeechRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(id_, type_);
    if (has_voice()) {
      if (voice_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        voice_->clear();
      }
    }
    if (has_asr()) {
      if (asr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        asr_->clear();
      }
    }
    if (has_lang()) {
      if (lang_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        lang_->clear();
      }
    }
    if (has_codec()) {
      if (codec_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        codec_->clear();
      }
    }
    if (has_vt()) {
      if (vt_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        vt_->clear();
      }
    }
    if (has_framework_options()) {
      if (framework_options_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        framework_options_->clear();
      }
    }
  }
  if (has_skill_options()) {
    if (skill_options_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      skill_options_->clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SpeechRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rokid.open.SpeechRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required .rokid.open.ReqType type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::rokid::open::ReqType_IsValid(value)) {
            set_type(static_cast< ::rokid::open::ReqType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_voice;
        break;
      }

      // optional bytes voice = 3;
      case 3: {
        if (tag == 26) {
         parse_voice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_voice()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_asr;
        break;
      }

      // optional string asr = 4;
      case 4: {
        if (tag == 34) {
         parse_asr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_asr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->asr().data(), this->asr().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "asr");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_lang;
        break;
      }

      // optional string lang = 5;
      case 5: {
        if (tag == 42) {
         parse_lang:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lang()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->lang().data(), this->lang().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "lang");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_codec;
        break;
      }

      // optional string codec = 6;
      case 6: {
        if (tag == 50) {
         parse_codec:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_codec()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->codec().data(), this->codec().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "codec");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_vt;
        break;
      }

      // optional string vt = 7;
      case 7: {
        if (tag == 58) {
         parse_vt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vt()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->vt().data(), this->vt().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "vt");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_framework_options;
        break;
      }

      // optional string framework_options = 8;
      case 8: {
        if (tag == 66) {
         parse_framework_options:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_framework_options()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->framework_options().data(), this->framework_options().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "framework_options");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_skill_options;
        break;
      }

      // optional string skill_options = 9;
      case 9: {
        if (tag == 74) {
         parse_skill_options:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_skill_options()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->skill_options().data(), this->skill_options().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "skill_options");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rokid.open.SpeechRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rokid.open.SpeechRequest)
  return false;
#undef DO_
}

void SpeechRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rokid.open.SpeechRequest)
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required .rokid.open.ReqType type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional bytes voice = 3;
  if (has_voice()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->voice(), output);
  }

  // optional string asr = 4;
  if (has_asr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->asr().data(), this->asr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "asr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->asr(), output);
  }

  // optional string lang = 5;
  if (has_lang()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lang().data(), this->lang().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "lang");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->lang(), output);
  }

  // optional string codec = 6;
  if (has_codec()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->codec().data(), this->codec().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "codec");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->codec(), output);
  }

  // optional string vt = 7;
  if (has_vt()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vt().data(), this->vt().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "vt");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->vt(), output);
  }

  // optional string framework_options = 8;
  if (has_framework_options()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->framework_options().data(), this->framework_options().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "framework_options");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->framework_options(), output);
  }

  // optional string skill_options = 9;
  if (has_skill_options()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->skill_options().data(), this->skill_options().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "skill_options");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->skill_options(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:rokid.open.SpeechRequest)
}

::google::protobuf::uint8* SpeechRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rokid.open.SpeechRequest)
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required .rokid.open.ReqType type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional bytes voice = 3;
  if (has_voice()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->voice(), target);
  }

  // optional string asr = 4;
  if (has_asr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->asr().data(), this->asr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "asr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->asr(), target);
  }

  // optional string lang = 5;
  if (has_lang()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lang().data(), this->lang().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "lang");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->lang(), target);
  }

  // optional string codec = 6;
  if (has_codec()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->codec().data(), this->codec().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "codec");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->codec(), target);
  }

  // optional string vt = 7;
  if (has_vt()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vt().data(), this->vt().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "vt");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->vt(), target);
  }

  // optional string framework_options = 8;
  if (has_framework_options()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->framework_options().data(), this->framework_options().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "framework_options");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->framework_options(), target);
  }

  // optional string skill_options = 9;
  if (has_skill_options()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->skill_options().data(), this->skill_options().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "skill_options");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->skill_options(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rokid.open.SpeechRequest)
  return target;
}

int SpeechRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required .rokid.open.ReqType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional bytes voice = 3;
    if (has_voice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->voice());
    }

    // optional string asr = 4;
    if (has_asr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->asr());
    }

    // optional string lang = 5;
    if (has_lang()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lang());
    }

    // optional string codec = 6;
    if (has_codec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->codec());
    }

    // optional string vt = 7;
    if (has_vt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->vt());
    }

    // optional string framework_options = 8;
    if (has_framework_options()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->framework_options());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string skill_options = 9;
    if (has_skill_options()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->skill_options());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpeechRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SpeechRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SpeechRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SpeechRequest::MergeFrom(const SpeechRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_voice()) {
      set_voice(from.voice());
    }
    if (from.has_asr()) {
      set_asr(from.asr());
    }
    if (from.has_lang()) {
      set_lang(from.lang());
    }
    if (from.has_codec()) {
      set_codec(from.codec());
    }
    if (from.has_vt()) {
      set_vt(from.vt());
    }
    if (from.has_framework_options()) {
      set_framework_options(from.framework_options());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_skill_options()) {
      set_skill_options(from.skill_options());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SpeechRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpeechRequest::CopyFrom(const SpeechRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpeechRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SpeechRequest::Swap(SpeechRequest* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(voice_, other->voice_);
    std::swap(asr_, other->asr_);
    std::swap(lang_, other->lang_);
    std::swap(codec_, other->codec_);
    std::swap(vt_, other->vt_);
    std::swap(framework_options_, other->framework_options_);
    std::swap(skill_options_, other->skill_options_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SpeechRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SpeechRequest_descriptor_;
  metadata.reflection = SpeechRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SpeechResponse::kIdFieldNumber;
const int SpeechResponse::kResultFieldNumber;
const int SpeechResponse::kAsrFieldNumber;
const int SpeechResponse::kNlpFieldNumber;
const int SpeechResponse::kActionFieldNumber;
const int SpeechResponse::kFinishFieldNumber;
const int SpeechResponse::kExtraFieldNumber;
#endif  // !_MSC_VER

SpeechResponse::SpeechResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rokid.open.SpeechResponse)
}

void SpeechResponse::InitAsDefaultInstance() {
}

SpeechResponse::SpeechResponse(const SpeechResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rokid.open.SpeechResponse)
}

void SpeechResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  result_ = 0;
  asr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nlp_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  action_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  finish_ = false;
  extra_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SpeechResponse::~SpeechResponse() {
  // @@protoc_insertion_point(destructor:rokid.open.SpeechResponse)
  SharedDtor();
}

void SpeechResponse::SharedDtor() {
  if (asr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete asr_;
  }
  if (nlp_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nlp_;
  }
  if (action_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete action_;
  }
  if (extra_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete extra_;
  }
  if (this != default_instance_) {
  }
}

void SpeechResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SpeechResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SpeechResponse_descriptor_;
}

const SpeechResponse& SpeechResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_speech_2eproto();
  return *default_instance_;
}

SpeechResponse* SpeechResponse::default_instance_ = NULL;

SpeechResponse* SpeechResponse::New() const {
  return new SpeechResponse;
}

void SpeechResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SpeechResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(id_, result_);
    if (has_asr()) {
      if (asr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        asr_->clear();
      }
    }
    if (has_nlp()) {
      if (nlp_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        nlp_->clear();
      }
    }
    if (has_action()) {
      if (action_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        action_->clear();
      }
    }
    finish_ = false;
    if (has_extra()) {
      if (extra_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        extra_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SpeechResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rokid.open.SpeechResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // required .rokid.open.SpeechErrorCode result = 2;
      case 2: {
        if (tag == 16) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::rokid::open::SpeechErrorCode_IsValid(value)) {
            set_result(static_cast< ::rokid::open::SpeechErrorCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_asr;
        break;
      }

      // optional string asr = 3;
      case 3: {
        if (tag == 26) {
         parse_asr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_asr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->asr().data(), this->asr().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "asr");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_nlp;
        break;
      }

      // optional string nlp = 4;
      case 4: {
        if (tag == 34) {
         parse_nlp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nlp()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nlp().data(), this->nlp().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "nlp");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_action;
        break;
      }

      // optional string action = 5;
      case 5: {
        if (tag == 42) {
         parse_action:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_action()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->action().data(), this->action().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "action");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_finish;
        break;
      }

      // optional bool finish = 6;
      case 6: {
        if (tag == 48) {
         parse_finish:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &finish_)));
          set_has_finish();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_extra;
        break;
      }

      // optional string extra = 7;
      case 7: {
        if (tag == 58) {
         parse_extra:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_extra()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->extra().data(), this->extra().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "extra");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rokid.open.SpeechResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rokid.open.SpeechResponse)
  return false;
#undef DO_
}

void SpeechResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rokid.open.SpeechResponse)
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required .rokid.open.SpeechErrorCode result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  // optional string asr = 3;
  if (has_asr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->asr().data(), this->asr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "asr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->asr(), output);
  }

  // optional string nlp = 4;
  if (has_nlp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nlp().data(), this->nlp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nlp");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->nlp(), output);
  }

  // optional string action = 5;
  if (has_action()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->action().data(), this->action().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "action");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->action(), output);
  }

  // optional bool finish = 6;
  if (has_finish()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->finish(), output);
  }

  // optional string extra = 7;
  if (has_extra()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->extra().data(), this->extra().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "extra");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->extra(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:rokid.open.SpeechResponse)
}

::google::protobuf::uint8* SpeechResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rokid.open.SpeechResponse)
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required .rokid.open.SpeechErrorCode result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  // optional string asr = 3;
  if (has_asr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->asr().data(), this->asr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "asr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->asr(), target);
  }

  // optional string nlp = 4;
  if (has_nlp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nlp().data(), this->nlp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nlp");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->nlp(), target);
  }

  // optional string action = 5;
  if (has_action()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->action().data(), this->action().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "action");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->action(), target);
  }

  // optional bool finish = 6;
  if (has_finish()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->finish(), target);
  }

  // optional string extra = 7;
  if (has_extra()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->extra().data(), this->extra().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "extra");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->extra(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rokid.open.SpeechResponse)
  return target;
}

int SpeechResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required .rokid.open.SpeechErrorCode result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional string asr = 3;
    if (has_asr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->asr());
    }

    // optional string nlp = 4;
    if (has_nlp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nlp());
    }

    // optional string action = 5;
    if (has_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->action());
    }

    // optional bool finish = 6;
    if (has_finish()) {
      total_size += 1 + 1;
    }

    // optional string extra = 7;
    if (has_extra()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->extra());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpeechResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SpeechResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SpeechResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SpeechResponse::MergeFrom(const SpeechResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_asr()) {
      set_asr(from.asr());
    }
    if (from.has_nlp()) {
      set_nlp(from.nlp());
    }
    if (from.has_action()) {
      set_action(from.action());
    }
    if (from.has_finish()) {
      set_finish(from.finish());
    }
    if (from.has_extra()) {
      set_extra(from.extra());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SpeechResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpeechResponse::CopyFrom(const SpeechResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpeechResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SpeechResponse::Swap(SpeechResponse* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(result_, other->result_);
    std::swap(asr_, other->asr_);
    std::swap(nlp_, other->nlp_);
    std::swap(action_, other->action_);
    std::swap(finish_, other->finish_);
    std::swap(extra_, other->extra_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SpeechResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SpeechResponse_descriptor_;
  metadata.reflection = SpeechResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace open
}  // namespace rokid

// @@protoc_insertion_point(global_scope)
