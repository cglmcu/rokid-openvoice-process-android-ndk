// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: auth.proto

#ifndef PROTOBUF_auth_2eproto__INCLUDED
#define PROTOBUF_auth_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace rokid {
namespace open {
namespace speech {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_auth_2eproto();
void protobuf_AssignDesc_auth_2eproto();
void protobuf_ShutdownFile_auth_2eproto();

class AuthRequest;
class AuthResponse;

enum AuthErrorCode {
  SUCCESS = 0,
  AUTH_FAILED = 1
};
bool AuthErrorCode_IsValid(int value);
const AuthErrorCode AuthErrorCode_MIN = SUCCESS;
const AuthErrorCode AuthErrorCode_MAX = AUTH_FAILED;
const int AuthErrorCode_ARRAYSIZE = AuthErrorCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* AuthErrorCode_descriptor();
inline const ::std::string& AuthErrorCode_Name(AuthErrorCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    AuthErrorCode_descriptor(), value);
}
inline bool AuthErrorCode_Parse(
    const ::std::string& name, AuthErrorCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AuthErrorCode>(
    AuthErrorCode_descriptor(), name, value);
}
// ===================================================================

class AuthRequest : public ::google::protobuf::Message {
 public:
  AuthRequest();
  virtual ~AuthRequest();

  AuthRequest(const AuthRequest& from);

  inline AuthRequest& operator=(const AuthRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AuthRequest& default_instance();

  void Swap(AuthRequest* other);

  // implements Message ----------------------------------------------

  AuthRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AuthRequest& from);
  void MergeFrom(const AuthRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // required string device_type_id = 2;
  inline bool has_device_type_id() const;
  inline void clear_device_type_id();
  static const int kDeviceTypeIdFieldNumber = 2;
  inline const ::std::string& device_type_id() const;
  inline void set_device_type_id(const ::std::string& value);
  inline void set_device_type_id(const char* value);
  inline void set_device_type_id(const char* value, size_t size);
  inline ::std::string* mutable_device_type_id();
  inline ::std::string* release_device_type_id();
  inline void set_allocated_device_type_id(::std::string* device_type_id);

  // required string device_id = 3;
  inline bool has_device_id() const;
  inline void clear_device_id();
  static const int kDeviceIdFieldNumber = 3;
  inline const ::std::string& device_id() const;
  inline void set_device_id(const ::std::string& value);
  inline void set_device_id(const char* value);
  inline void set_device_id(const char* value, size_t size);
  inline ::std::string* mutable_device_id();
  inline ::std::string* release_device_id();
  inline void set_allocated_device_id(::std::string* device_id);

  // required string service = 4;
  inline bool has_service() const;
  inline void clear_service();
  static const int kServiceFieldNumber = 4;
  inline const ::std::string& service() const;
  inline void set_service(const ::std::string& value);
  inline void set_service(const char* value);
  inline void set_service(const char* value, size_t size);
  inline ::std::string* mutable_service();
  inline ::std::string* release_service();
  inline void set_allocated_service(::std::string* service);

  // required string version = 5;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 5;
  inline const ::std::string& version() const;
  inline void set_version(const ::std::string& value);
  inline void set_version(const char* value);
  inline void set_version(const char* value, size_t size);
  inline ::std::string* mutable_version();
  inline ::std::string* release_version();
  inline void set_allocated_version(::std::string* version);

  // required string timestamp = 6;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 6;
  inline const ::std::string& timestamp() const;
  inline void set_timestamp(const ::std::string& value);
  inline void set_timestamp(const char* value);
  inline void set_timestamp(const char* value, size_t size);
  inline ::std::string* mutable_timestamp();
  inline ::std::string* release_timestamp();
  inline void set_allocated_timestamp(::std::string* timestamp);

  // required string sign = 7;
  inline bool has_sign() const;
  inline void clear_sign();
  static const int kSignFieldNumber = 7;
  inline const ::std::string& sign() const;
  inline void set_sign(const ::std::string& value);
  inline void set_sign(const char* value);
  inline void set_sign(const char* value, size_t size);
  inline ::std::string* mutable_sign();
  inline ::std::string* release_sign();
  inline void set_allocated_sign(::std::string* sign);

  // @@protoc_insertion_point(class_scope:rokid.open.speech.AuthRequest)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_device_type_id();
  inline void clear_has_device_type_id();
  inline void set_has_device_id();
  inline void clear_has_device_id();
  inline void set_has_service();
  inline void clear_has_service();
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_sign();
  inline void clear_has_sign();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* key_;
  ::std::string* device_type_id_;
  ::std::string* device_id_;
  ::std::string* service_;
  ::std::string* version_;
  ::std::string* timestamp_;
  ::std::string* sign_;
  friend void  protobuf_AddDesc_auth_2eproto();
  friend void protobuf_AssignDesc_auth_2eproto();
  friend void protobuf_ShutdownFile_auth_2eproto();

  void InitAsDefaultInstance();
  static AuthRequest* default_instance_;
};
// -------------------------------------------------------------------

class AuthResponse : public ::google::protobuf::Message {
 public:
  AuthResponse();
  virtual ~AuthResponse();

  AuthResponse(const AuthResponse& from);

  inline AuthResponse& operator=(const AuthResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AuthResponse& default_instance();

  void Swap(AuthResponse* other);

  // implements Message ----------------------------------------------

  AuthResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AuthResponse& from);
  void MergeFrom(const AuthResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .rokid.open.speech.AuthErrorCode result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::rokid::open::speech::AuthErrorCode result() const;
  inline void set_result(::rokid::open::speech::AuthErrorCode value);

  // @@protoc_insertion_point(class_scope:rokid.open.speech.AuthResponse)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int result_;
  friend void  protobuf_AddDesc_auth_2eproto();
  friend void protobuf_AssignDesc_auth_2eproto();
  friend void protobuf_ShutdownFile_auth_2eproto();

  void InitAsDefaultInstance();
  static AuthResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// AuthRequest

// required string key = 1;
inline bool AuthRequest::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AuthRequest::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AuthRequest::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AuthRequest::clear_key() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& AuthRequest::key() const {
  // @@protoc_insertion_point(field_get:rokid.open.speech.AuthRequest.key)
  return *key_;
}
inline void AuthRequest::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set:rokid.open.speech.AuthRequest.key)
}
inline void AuthRequest::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set_char:rokid.open.speech.AuthRequest.key)
}
inline void AuthRequest::set_key(const char* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:rokid.open.speech.AuthRequest.key)
}
inline ::std::string* AuthRequest::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:rokid.open.speech.AuthRequest.key)
  return key_;
}
inline ::std::string* AuthRequest::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AuthRequest::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:rokid.open.speech.AuthRequest.key)
}

// required string device_type_id = 2;
inline bool AuthRequest::has_device_type_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AuthRequest::set_has_device_type_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AuthRequest::clear_has_device_type_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AuthRequest::clear_device_type_id() {
  if (device_type_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    device_type_id_->clear();
  }
  clear_has_device_type_id();
}
inline const ::std::string& AuthRequest::device_type_id() const {
  // @@protoc_insertion_point(field_get:rokid.open.speech.AuthRequest.device_type_id)
  return *device_type_id_;
}
inline void AuthRequest::set_device_type_id(const ::std::string& value) {
  set_has_device_type_id();
  if (device_type_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    device_type_id_ = new ::std::string;
  }
  device_type_id_->assign(value);
  // @@protoc_insertion_point(field_set:rokid.open.speech.AuthRequest.device_type_id)
}
inline void AuthRequest::set_device_type_id(const char* value) {
  set_has_device_type_id();
  if (device_type_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    device_type_id_ = new ::std::string;
  }
  device_type_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:rokid.open.speech.AuthRequest.device_type_id)
}
inline void AuthRequest::set_device_type_id(const char* value, size_t size) {
  set_has_device_type_id();
  if (device_type_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    device_type_id_ = new ::std::string;
  }
  device_type_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:rokid.open.speech.AuthRequest.device_type_id)
}
inline ::std::string* AuthRequest::mutable_device_type_id() {
  set_has_device_type_id();
  if (device_type_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    device_type_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:rokid.open.speech.AuthRequest.device_type_id)
  return device_type_id_;
}
inline ::std::string* AuthRequest::release_device_type_id() {
  clear_has_device_type_id();
  if (device_type_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = device_type_id_;
    device_type_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AuthRequest::set_allocated_device_type_id(::std::string* device_type_id) {
  if (device_type_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete device_type_id_;
  }
  if (device_type_id) {
    set_has_device_type_id();
    device_type_id_ = device_type_id;
  } else {
    clear_has_device_type_id();
    device_type_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:rokid.open.speech.AuthRequest.device_type_id)
}

// required string device_id = 3;
inline bool AuthRequest::has_device_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AuthRequest::set_has_device_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AuthRequest::clear_has_device_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AuthRequest::clear_device_id() {
  if (device_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    device_id_->clear();
  }
  clear_has_device_id();
}
inline const ::std::string& AuthRequest::device_id() const {
  // @@protoc_insertion_point(field_get:rokid.open.speech.AuthRequest.device_id)
  return *device_id_;
}
inline void AuthRequest::set_device_id(const ::std::string& value) {
  set_has_device_id();
  if (device_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    device_id_ = new ::std::string;
  }
  device_id_->assign(value);
  // @@protoc_insertion_point(field_set:rokid.open.speech.AuthRequest.device_id)
}
inline void AuthRequest::set_device_id(const char* value) {
  set_has_device_id();
  if (device_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    device_id_ = new ::std::string;
  }
  device_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:rokid.open.speech.AuthRequest.device_id)
}
inline void AuthRequest::set_device_id(const char* value, size_t size) {
  set_has_device_id();
  if (device_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    device_id_ = new ::std::string;
  }
  device_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:rokid.open.speech.AuthRequest.device_id)
}
inline ::std::string* AuthRequest::mutable_device_id() {
  set_has_device_id();
  if (device_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    device_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:rokid.open.speech.AuthRequest.device_id)
  return device_id_;
}
inline ::std::string* AuthRequest::release_device_id() {
  clear_has_device_id();
  if (device_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = device_id_;
    device_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AuthRequest::set_allocated_device_id(::std::string* device_id) {
  if (device_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete device_id_;
  }
  if (device_id) {
    set_has_device_id();
    device_id_ = device_id;
  } else {
    clear_has_device_id();
    device_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:rokid.open.speech.AuthRequest.device_id)
}

// required string service = 4;
inline bool AuthRequest::has_service() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AuthRequest::set_has_service() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AuthRequest::clear_has_service() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AuthRequest::clear_service() {
  if (service_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    service_->clear();
  }
  clear_has_service();
}
inline const ::std::string& AuthRequest::service() const {
  // @@protoc_insertion_point(field_get:rokid.open.speech.AuthRequest.service)
  return *service_;
}
inline void AuthRequest::set_service(const ::std::string& value) {
  set_has_service();
  if (service_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    service_ = new ::std::string;
  }
  service_->assign(value);
  // @@protoc_insertion_point(field_set:rokid.open.speech.AuthRequest.service)
}
inline void AuthRequest::set_service(const char* value) {
  set_has_service();
  if (service_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    service_ = new ::std::string;
  }
  service_->assign(value);
  // @@protoc_insertion_point(field_set_char:rokid.open.speech.AuthRequest.service)
}
inline void AuthRequest::set_service(const char* value, size_t size) {
  set_has_service();
  if (service_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    service_ = new ::std::string;
  }
  service_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:rokid.open.speech.AuthRequest.service)
}
inline ::std::string* AuthRequest::mutable_service() {
  set_has_service();
  if (service_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    service_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:rokid.open.speech.AuthRequest.service)
  return service_;
}
inline ::std::string* AuthRequest::release_service() {
  clear_has_service();
  if (service_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = service_;
    service_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AuthRequest::set_allocated_service(::std::string* service) {
  if (service_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete service_;
  }
  if (service) {
    set_has_service();
    service_ = service;
  } else {
    clear_has_service();
    service_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:rokid.open.speech.AuthRequest.service)
}

// required string version = 5;
inline bool AuthRequest::has_version() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AuthRequest::set_has_version() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AuthRequest::clear_has_version() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AuthRequest::clear_version() {
  if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_->clear();
  }
  clear_has_version();
}
inline const ::std::string& AuthRequest::version() const {
  // @@protoc_insertion_point(field_get:rokid.open.speech.AuthRequest.version)
  return *version_;
}
inline void AuthRequest::set_version(const ::std::string& value) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_ = new ::std::string;
  }
  version_->assign(value);
  // @@protoc_insertion_point(field_set:rokid.open.speech.AuthRequest.version)
}
inline void AuthRequest::set_version(const char* value) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_ = new ::std::string;
  }
  version_->assign(value);
  // @@protoc_insertion_point(field_set_char:rokid.open.speech.AuthRequest.version)
}
inline void AuthRequest::set_version(const char* value, size_t size) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_ = new ::std::string;
  }
  version_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:rokid.open.speech.AuthRequest.version)
}
inline ::std::string* AuthRequest::mutable_version() {
  set_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:rokid.open.speech.AuthRequest.version)
  return version_;
}
inline ::std::string* AuthRequest::release_version() {
  clear_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = version_;
    version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AuthRequest::set_allocated_version(::std::string* version) {
  if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete version_;
  }
  if (version) {
    set_has_version();
    version_ = version;
  } else {
    clear_has_version();
    version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:rokid.open.speech.AuthRequest.version)
}

// required string timestamp = 6;
inline bool AuthRequest::has_timestamp() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AuthRequest::set_has_timestamp() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AuthRequest::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AuthRequest::clear_timestamp() {
  if (timestamp_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    timestamp_->clear();
  }
  clear_has_timestamp();
}
inline const ::std::string& AuthRequest::timestamp() const {
  // @@protoc_insertion_point(field_get:rokid.open.speech.AuthRequest.timestamp)
  return *timestamp_;
}
inline void AuthRequest::set_timestamp(const ::std::string& value) {
  set_has_timestamp();
  if (timestamp_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    timestamp_ = new ::std::string;
  }
  timestamp_->assign(value);
  // @@protoc_insertion_point(field_set:rokid.open.speech.AuthRequest.timestamp)
}
inline void AuthRequest::set_timestamp(const char* value) {
  set_has_timestamp();
  if (timestamp_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    timestamp_ = new ::std::string;
  }
  timestamp_->assign(value);
  // @@protoc_insertion_point(field_set_char:rokid.open.speech.AuthRequest.timestamp)
}
inline void AuthRequest::set_timestamp(const char* value, size_t size) {
  set_has_timestamp();
  if (timestamp_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    timestamp_ = new ::std::string;
  }
  timestamp_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:rokid.open.speech.AuthRequest.timestamp)
}
inline ::std::string* AuthRequest::mutable_timestamp() {
  set_has_timestamp();
  if (timestamp_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    timestamp_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:rokid.open.speech.AuthRequest.timestamp)
  return timestamp_;
}
inline ::std::string* AuthRequest::release_timestamp() {
  clear_has_timestamp();
  if (timestamp_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = timestamp_;
    timestamp_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AuthRequest::set_allocated_timestamp(::std::string* timestamp) {
  if (timestamp_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete timestamp_;
  }
  if (timestamp) {
    set_has_timestamp();
    timestamp_ = timestamp;
  } else {
    clear_has_timestamp();
    timestamp_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:rokid.open.speech.AuthRequest.timestamp)
}

// required string sign = 7;
inline bool AuthRequest::has_sign() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void AuthRequest::set_has_sign() {
  _has_bits_[0] |= 0x00000040u;
}
inline void AuthRequest::clear_has_sign() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void AuthRequest::clear_sign() {
  if (sign_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sign_->clear();
  }
  clear_has_sign();
}
inline const ::std::string& AuthRequest::sign() const {
  // @@protoc_insertion_point(field_get:rokid.open.speech.AuthRequest.sign)
  return *sign_;
}
inline void AuthRequest::set_sign(const ::std::string& value) {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sign_ = new ::std::string;
  }
  sign_->assign(value);
  // @@protoc_insertion_point(field_set:rokid.open.speech.AuthRequest.sign)
}
inline void AuthRequest::set_sign(const char* value) {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sign_ = new ::std::string;
  }
  sign_->assign(value);
  // @@protoc_insertion_point(field_set_char:rokid.open.speech.AuthRequest.sign)
}
inline void AuthRequest::set_sign(const char* value, size_t size) {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sign_ = new ::std::string;
  }
  sign_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:rokid.open.speech.AuthRequest.sign)
}
inline ::std::string* AuthRequest::mutable_sign() {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sign_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:rokid.open.speech.AuthRequest.sign)
  return sign_;
}
inline ::std::string* AuthRequest::release_sign() {
  clear_has_sign();
  if (sign_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sign_;
    sign_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AuthRequest::set_allocated_sign(::std::string* sign) {
  if (sign_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sign_;
  }
  if (sign) {
    set_has_sign();
    sign_ = sign;
  } else {
    clear_has_sign();
    sign_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:rokid.open.speech.AuthRequest.sign)
}

// -------------------------------------------------------------------

// AuthResponse

// required .rokid.open.speech.AuthErrorCode result = 1;
inline bool AuthResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AuthResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AuthResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AuthResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::rokid::open::speech::AuthErrorCode AuthResponse::result() const {
  // @@protoc_insertion_point(field_get:rokid.open.speech.AuthResponse.result)
  return static_cast< ::rokid::open::speech::AuthErrorCode >(result_);
}
inline void AuthResponse::set_result(::rokid::open::speech::AuthErrorCode value) {
  assert(::rokid::open::speech::AuthErrorCode_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:rokid.open.speech.AuthResponse.result)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace speech
}  // namespace open
}  // namespace rokid

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::rokid::open::speech::AuthErrorCode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::rokid::open::speech::AuthErrorCode>() {
  return ::rokid::open::speech::AuthErrorCode_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_auth_2eproto__INCLUDED
