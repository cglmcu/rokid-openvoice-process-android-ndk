// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tts.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "tts.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace rokid {
namespace open {
namespace speech {
namespace v1 {

namespace {

const ::google::protobuf::Descriptor* TtsRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TtsRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* TtsResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TtsResponse_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_tts_2eproto() {
  protobuf_AddDesc_tts_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "tts.proto");
  GOOGLE_CHECK(file != NULL);
  TtsRequest_descriptor_ = file->message_type(0);
  static const int TtsRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TtsRequest, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TtsRequest, text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TtsRequest, declaimer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TtsRequest, codec_),
  };
  TtsRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TtsRequest_descriptor_,
      TtsRequest::default_instance_,
      TtsRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TtsRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TtsRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TtsRequest));
  TtsResponse_descriptor_ = file->message_type(1);
  static const int TtsResponse_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TtsResponse, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TtsResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TtsResponse, text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TtsResponse, voice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TtsResponse, finish_),
  };
  TtsResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TtsResponse_descriptor_,
      TtsResponse::default_instance_,
      TtsResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TtsResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TtsResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TtsResponse));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_tts_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TtsRequest_descriptor_, &TtsRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TtsResponse_descriptor_, &TtsResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_tts_2eproto() {
  delete TtsRequest::default_instance_;
  delete TtsRequest_reflection_;
  delete TtsResponse::default_instance_;
  delete TtsResponse_reflection_;
}

void protobuf_AddDesc_tts_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::rokid::open::speech::v1::protobuf_AddDesc_speech_5ftypes_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\ttts.proto\022\024rokid.open.speech.v1\032\022speec"
    "h_types.proto\"H\n\nTtsRequest\022\n\n\002id\030\001 \002(\005\022"
    "\014\n\004text\030\002 \002(\t\022\021\n\tdeclaimer\030\003 \001(\t\022\r\n\005code"
    "c\030\004 \001(\t\"}\n\013TtsResponse\022\n\n\002id\030\001 \002(\005\0225\n\006re"
    "sult\030\002 \002(\0162%.rokid.open.speech.v1.Speech"
    "ErrorCode\022\014\n\004text\030\003 \001(\t\022\r\n\005voice\030\004 \001(\014\022\016"
    "\n\006finish\030\005 \001(\010P\000", 256);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "tts.proto", &protobuf_RegisterTypes);
  TtsRequest::default_instance_ = new TtsRequest();
  TtsResponse::default_instance_ = new TtsResponse();
  TtsRequest::default_instance_->InitAsDefaultInstance();
  TtsResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_tts_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_tts_2eproto {
  StaticDescriptorInitializer_tts_2eproto() {
    protobuf_AddDesc_tts_2eproto();
  }
} static_descriptor_initializer_tts_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int TtsRequest::kIdFieldNumber;
const int TtsRequest::kTextFieldNumber;
const int TtsRequest::kDeclaimerFieldNumber;
const int TtsRequest::kCodecFieldNumber;
#endif  // !_MSC_VER

TtsRequest::TtsRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rokid.open.speech.v1.TtsRequest)
}

void TtsRequest::InitAsDefaultInstance() {
}

TtsRequest::TtsRequest(const TtsRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rokid.open.speech.v1.TtsRequest)
}

void TtsRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  declaimer_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  codec_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TtsRequest::~TtsRequest() {
  // @@protoc_insertion_point(destructor:rokid.open.speech.v1.TtsRequest)
  SharedDtor();
}

void TtsRequest::SharedDtor() {
  if (text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete text_;
  }
  if (declaimer_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete declaimer_;
  }
  if (codec_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete codec_;
  }
  if (this != default_instance_) {
  }
}

void TtsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TtsRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TtsRequest_descriptor_;
}

const TtsRequest& TtsRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tts_2eproto();
  return *default_instance_;
}

TtsRequest* TtsRequest::default_instance_ = NULL;

TtsRequest* TtsRequest::New() const {
  return new TtsRequest;
}

void TtsRequest::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    id_ = 0;
    if (has_text()) {
      if (text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        text_->clear();
      }
    }
    if (has_declaimer()) {
      if (declaimer_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        declaimer_->clear();
      }
    }
    if (has_codec()) {
      if (codec_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        codec_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TtsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rokid.open.speech.v1.TtsRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_text;
        break;
      }

      // required string text = 2;
      case 2: {
        if (tag == 18) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "text");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_declaimer;
        break;
      }

      // optional string declaimer = 3;
      case 3: {
        if (tag == 26) {
         parse_declaimer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_declaimer()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->declaimer().data(), this->declaimer().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "declaimer");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_codec;
        break;
      }

      // optional string codec = 4;
      case 4: {
        if (tag == 34) {
         parse_codec:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_codec()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->codec().data(), this->codec().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "codec");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rokid.open.speech.v1.TtsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rokid.open.speech.v1.TtsRequest)
  return false;
#undef DO_
}

void TtsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rokid.open.speech.v1.TtsRequest)
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required string text = 2;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->text(), output);
  }

  // optional string declaimer = 3;
  if (has_declaimer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->declaimer().data(), this->declaimer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "declaimer");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->declaimer(), output);
  }

  // optional string codec = 4;
  if (has_codec()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->codec().data(), this->codec().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "codec");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->codec(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:rokid.open.speech.v1.TtsRequest)
}

::google::protobuf::uint8* TtsRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rokid.open.speech.v1.TtsRequest)
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required string text = 2;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->text(), target);
  }

  // optional string declaimer = 3;
  if (has_declaimer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->declaimer().data(), this->declaimer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "declaimer");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->declaimer(), target);
  }

  // optional string codec = 4;
  if (has_codec()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->codec().data(), this->codec().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "codec");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->codec(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rokid.open.speech.v1.TtsRequest)
  return target;
}

int TtsRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required string text = 2;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

    // optional string declaimer = 3;
    if (has_declaimer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->declaimer());
    }

    // optional string codec = 4;
    if (has_codec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->codec());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TtsRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TtsRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TtsRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TtsRequest::MergeFrom(const TtsRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_text()) {
      set_text(from.text());
    }
    if (from.has_declaimer()) {
      set_declaimer(from.declaimer());
    }
    if (from.has_codec()) {
      set_codec(from.codec());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TtsRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TtsRequest::CopyFrom(const TtsRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TtsRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void TtsRequest::Swap(TtsRequest* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(text_, other->text_);
    std::swap(declaimer_, other->declaimer_);
    std::swap(codec_, other->codec_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TtsRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TtsRequest_descriptor_;
  metadata.reflection = TtsRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TtsResponse::kIdFieldNumber;
const int TtsResponse::kResultFieldNumber;
const int TtsResponse::kTextFieldNumber;
const int TtsResponse::kVoiceFieldNumber;
const int TtsResponse::kFinishFieldNumber;
#endif  // !_MSC_VER

TtsResponse::TtsResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rokid.open.speech.v1.TtsResponse)
}

void TtsResponse::InitAsDefaultInstance() {
}

TtsResponse::TtsResponse(const TtsResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rokid.open.speech.v1.TtsResponse)
}

void TtsResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  result_ = 0;
  text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  voice_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  finish_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TtsResponse::~TtsResponse() {
  // @@protoc_insertion_point(destructor:rokid.open.speech.v1.TtsResponse)
  SharedDtor();
}

void TtsResponse::SharedDtor() {
  if (text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete text_;
  }
  if (voice_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete voice_;
  }
  if (this != default_instance_) {
  }
}

void TtsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TtsResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TtsResponse_descriptor_;
}

const TtsResponse& TtsResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tts_2eproto();
  return *default_instance_;
}

TtsResponse* TtsResponse::default_instance_ = NULL;

TtsResponse* TtsResponse::New() const {
  return new TtsResponse;
}

void TtsResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TtsResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(id_, result_);
    if (has_text()) {
      if (text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        text_->clear();
      }
    }
    if (has_voice()) {
      if (voice_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        voice_->clear();
      }
    }
    finish_ = false;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TtsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rokid.open.speech.v1.TtsResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // required .rokid.open.speech.v1.SpeechErrorCode result = 2;
      case 2: {
        if (tag == 16) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::rokid::open::speech::v1::SpeechErrorCode_IsValid(value)) {
            set_result(static_cast< ::rokid::open::speech::v1::SpeechErrorCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_text;
        break;
      }

      // optional string text = 3;
      case 3: {
        if (tag == 26) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "text");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_voice;
        break;
      }

      // optional bytes voice = 4;
      case 4: {
        if (tag == 34) {
         parse_voice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_voice()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_finish;
        break;
      }

      // optional bool finish = 5;
      case 5: {
        if (tag == 40) {
         parse_finish:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &finish_)));
          set_has_finish();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rokid.open.speech.v1.TtsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rokid.open.speech.v1.TtsResponse)
  return false;
#undef DO_
}

void TtsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rokid.open.speech.v1.TtsResponse)
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required .rokid.open.speech.v1.SpeechErrorCode result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  // optional string text = 3;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->text(), output);
  }

  // optional bytes voice = 4;
  if (has_voice()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->voice(), output);
  }

  // optional bool finish = 5;
  if (has_finish()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->finish(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:rokid.open.speech.v1.TtsResponse)
}

::google::protobuf::uint8* TtsResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rokid.open.speech.v1.TtsResponse)
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required .rokid.open.speech.v1.SpeechErrorCode result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  // optional string text = 3;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->text(), target);
  }

  // optional bytes voice = 4;
  if (has_voice()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->voice(), target);
  }

  // optional bool finish = 5;
  if (has_finish()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->finish(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rokid.open.speech.v1.TtsResponse)
  return target;
}

int TtsResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required .rokid.open.speech.v1.SpeechErrorCode result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional string text = 3;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

    // optional bytes voice = 4;
    if (has_voice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->voice());
    }

    // optional bool finish = 5;
    if (has_finish()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TtsResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TtsResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TtsResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TtsResponse::MergeFrom(const TtsResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_text()) {
      set_text(from.text());
    }
    if (from.has_voice()) {
      set_voice(from.voice());
    }
    if (from.has_finish()) {
      set_finish(from.finish());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TtsResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TtsResponse::CopyFrom(const TtsResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TtsResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void TtsResponse::Swap(TtsResponse* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(result_, other->result_);
    std::swap(text_, other->text_);
    std::swap(voice_, other->voice_);
    std::swap(finish_, other->finish_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TtsResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TtsResponse_descriptor_;
  metadata.reflection = TtsResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace speech
}  // namespace open
}  // namespace rokid

// @@protoc_insertion_point(global_scope)
