// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: speech_types.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "speech_types.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace rokid {
namespace open {
namespace speech {
namespace v1 {

namespace {

const ::google::protobuf::EnumDescriptor* SpeechErrorCode_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ReqType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Codec_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_speech_5ftypes_2eproto() {
  protobuf_AddDesc_speech_5ftypes_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "speech_types.proto");
  GOOGLE_CHECK(file != NULL);
  SpeechErrorCode_descriptor_ = file->enum_type(0);
  ReqType_descriptor_ = file->enum_type(1);
  Codec_descriptor_ = file->enum_type(2);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_speech_5ftypes_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
}

}  // namespace

void protobuf_ShutdownFile_speech_5ftypes_2eproto() {
}

void protobuf_AddDesc_speech_5ftypes_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022speech_types.proto\022\024rokid.open.speech."
    "v1*\212\001\n\017SpeechErrorCode\022\013\n\007SUCCESS\020\000\022\023\n\017U"
    "NAUTHENTICATED\020\002\022\025\n\021CONNECTION_EXCEED\020\003\022"
    "\025\n\021RESOURCE_EXHASTED\020\004\022\010\n\004BUSY\020\005\022\014\n\010INTE"
    "RNAL\020\006\022\017\n\013VAD_TIMEOUT\020\007*2\n\007ReqType\022\t\n\005ST"
    "ART\020\000\022\t\n\005VOICE\020\001\022\007\n\003END\020\002\022\010\n\004TEXT\020\003*#\n\005C"
    "odec\022\007\n\003PCM\020\000\022\007\n\003OPU\020\001\022\010\n\004OPU2\020\002", 272);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "speech_types.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_speech_5ftypes_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_speech_5ftypes_2eproto {
  StaticDescriptorInitializer_speech_5ftypes_2eproto() {
    protobuf_AddDesc_speech_5ftypes_2eproto();
  }
} static_descriptor_initializer_speech_5ftypes_2eproto_;
const ::google::protobuf::EnumDescriptor* SpeechErrorCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SpeechErrorCode_descriptor_;
}
bool SpeechErrorCode_IsValid(int value) {
  switch(value) {
    case 0:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ReqType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqType_descriptor_;
}
bool ReqType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Codec_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Codec_descriptor_;
}
bool Codec_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace speech
}  // namespace open
}  // namespace rokid

// @@protoc_insertion_point(global_scope)
