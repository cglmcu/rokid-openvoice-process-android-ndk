// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: speech_types.proto

#ifndef PROTOBUF_speech_5ftypes_2eproto__INCLUDED
#define PROTOBUF_speech_5ftypes_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
// @@protoc_insertion_point(includes)

namespace rokid {
namespace open {
namespace speech {
namespace v1 {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_speech_5ftypes_2eproto();
void protobuf_AssignDesc_speech_5ftypes_2eproto();
void protobuf_ShutdownFile_speech_5ftypes_2eproto();


enum SpeechErrorCode {
  SUCCESS = 0,
  UNAUTHENTICATED = 2,
  CONNECTION_EXCEED = 3,
  RESOURCE_EXHASTED = 4,
  BUSY = 5,
  INTERNAL = 6,
  VAD_TIMEOUT = 7
};
bool SpeechErrorCode_IsValid(int value);
const SpeechErrorCode SpeechErrorCode_MIN = SUCCESS;
const SpeechErrorCode SpeechErrorCode_MAX = VAD_TIMEOUT;
const int SpeechErrorCode_ARRAYSIZE = SpeechErrorCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* SpeechErrorCode_descriptor();
inline const ::std::string& SpeechErrorCode_Name(SpeechErrorCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    SpeechErrorCode_descriptor(), value);
}
inline bool SpeechErrorCode_Parse(
    const ::std::string& name, SpeechErrorCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SpeechErrorCode>(
    SpeechErrorCode_descriptor(), name, value);
}
enum ReqType {
  START = 0,
  VOICE = 1,
  END = 2,
  TEXT = 3
};
bool ReqType_IsValid(int value);
const ReqType ReqType_MIN = START;
const ReqType ReqType_MAX = TEXT;
const int ReqType_ARRAYSIZE = ReqType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ReqType_descriptor();
inline const ::std::string& ReqType_Name(ReqType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ReqType_descriptor(), value);
}
inline bool ReqType_Parse(
    const ::std::string& name, ReqType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ReqType>(
    ReqType_descriptor(), name, value);
}
enum Codec {
  PCM = 0,
  OPU = 1,
  OPU2 = 2
};
bool Codec_IsValid(int value);
const Codec Codec_MIN = PCM;
const Codec Codec_MAX = OPU2;
const int Codec_ARRAYSIZE = Codec_MAX + 1;

const ::google::protobuf::EnumDescriptor* Codec_descriptor();
inline const ::std::string& Codec_Name(Codec value) {
  return ::google::protobuf::internal::NameOfEnum(
    Codec_descriptor(), value);
}
inline bool Codec_Parse(
    const ::std::string& name, Codec* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Codec>(
    Codec_descriptor(), name, value);
}
// ===================================================================


// ===================================================================


// ===================================================================


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace speech
}  // namespace open
}  // namespace rokid

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::rokid::open::speech::v1::SpeechErrorCode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::rokid::open::speech::v1::SpeechErrorCode>() {
  return ::rokid::open::speech::v1::SpeechErrorCode_descriptor();
}
template <> struct is_proto_enum< ::rokid::open::speech::v1::ReqType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::rokid::open::speech::v1::ReqType>() {
  return ::rokid::open::speech::v1::ReqType_descriptor();
}
template <> struct is_proto_enum< ::rokid::open::speech::v1::Codec> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::rokid::open::speech::v1::Codec>() {
  return ::rokid::open::speech::v1::Codec_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_speech_5ftypes_2eproto__INCLUDED
