// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: speech.proto

#ifndef PROTOBUF_speech_2eproto__INCLUDED
#define PROTOBUF_speech_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "speech_types.pb.h"  // IWYU pragma: export
// @@protoc_insertion_point(includes)

namespace rokid {
namespace open {
namespace speech {
namespace v2 {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_speech_2eproto();
void protobuf_AssignDesc_speech_2eproto();
void protobuf_ShutdownFile_speech_2eproto();

class SpeechOptions;
class SpeechRequest;
class SpeechResponse;

enum RespType {
  INTERMEDIATE = 0,
  ASR_FINISH = 1,
  FINISH = 2
};
bool RespType_IsValid(int value);
const RespType RespType_MIN = INTERMEDIATE;
const RespType RespType_MAX = FINISH;
const int RespType_ARRAYSIZE = RespType_MAX + 1;

const ::google::protobuf::EnumDescriptor* RespType_descriptor();
inline const ::std::string& RespType_Name(RespType value) {
  return ::google::protobuf::internal::NameOfEnum(
    RespType_descriptor(), value);
}
inline bool RespType_Parse(
    const ::std::string& name, RespType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RespType>(
    RespType_descriptor(), name, value);
}
enum Lang {
  ZH = 0,
  EN = 1
};
bool Lang_IsValid(int value);
const Lang Lang_MIN = ZH;
const Lang Lang_MAX = EN;
const int Lang_ARRAYSIZE = Lang_MAX + 1;

const ::google::protobuf::EnumDescriptor* Lang_descriptor();
inline const ::std::string& Lang_Name(Lang value) {
  return ::google::protobuf::internal::NameOfEnum(
    Lang_descriptor(), value);
}
inline bool Lang_Parse(
    const ::std::string& name, Lang* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Lang>(
    Lang_descriptor(), name, value);
}
enum VadMode {
  LOCAL = 0,
  CLOUD = 1
};
bool VadMode_IsValid(int value);
const VadMode VadMode_MIN = LOCAL;
const VadMode VadMode_MAX = CLOUD;
const int VadMode_ARRAYSIZE = VadMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* VadMode_descriptor();
inline const ::std::string& VadMode_Name(VadMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    VadMode_descriptor(), value);
}
inline bool VadMode_Parse(
    const ::std::string& name, VadMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<VadMode>(
    VadMode_descriptor(), name, value);
}
// ===================================================================

class SpeechOptions : public ::google::protobuf::Message {
 public:
  SpeechOptions();
  virtual ~SpeechOptions();

  SpeechOptions(const SpeechOptions& from);

  inline SpeechOptions& operator=(const SpeechOptions& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SpeechOptions& default_instance();

  void Swap(SpeechOptions* other);

  // implements Message ----------------------------------------------

  SpeechOptions* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SpeechOptions& from);
  void MergeFrom(const SpeechOptions& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .rokid.open.speech.v2.Lang lang = 1;
  inline bool has_lang() const;
  inline void clear_lang();
  static const int kLangFieldNumber = 1;
  inline ::rokid::open::speech::v2::Lang lang() const;
  inline void set_lang(::rokid::open::speech::v2::Lang value);

  // required .rokid.open.speech.v1.Codec codec = 2;
  inline bool has_codec() const;
  inline void clear_codec();
  static const int kCodecFieldNumber = 2;
  inline ::rokid::open::speech::v1::Codec codec() const;
  inline void set_codec(::rokid::open::speech::v1::Codec value);

  // required .rokid.open.speech.v2.VadMode vad_mode = 3;
  inline bool has_vad_mode() const;
  inline void clear_vad_mode();
  static const int kVadModeFieldNumber = 3;
  inline ::rokid::open::speech::v2::VadMode vad_mode() const;
  inline void set_vad_mode(::rokid::open::speech::v2::VadMode value);

  // optional uint32 vend_timeout = 4;
  inline bool has_vend_timeout() const;
  inline void clear_vend_timeout();
  static const int kVendTimeoutFieldNumber = 4;
  inline ::google::protobuf::uint32 vend_timeout() const;
  inline void set_vend_timeout(::google::protobuf::uint32 value);

  // required bool no_nlp = 5;
  inline bool has_no_nlp() const;
  inline void clear_no_nlp();
  static const int kNoNlpFieldNumber = 5;
  inline bool no_nlp() const;
  inline void set_no_nlp(bool value);

  // required bool no_intermediate_asr = 6;
  inline bool has_no_intermediate_asr() const;
  inline void clear_no_intermediate_asr();
  static const int kNoIntermediateAsrFieldNumber = 6;
  inline bool no_intermediate_asr() const;
  inline void set_no_intermediate_asr(bool value);

  // optional string stack = 7;
  inline bool has_stack() const;
  inline void clear_stack();
  static const int kStackFieldNumber = 7;
  inline const ::std::string& stack() const;
  inline void set_stack(const ::std::string& value);
  inline void set_stack(const char* value);
  inline void set_stack(const char* value, size_t size);
  inline ::std::string* mutable_stack();
  inline ::std::string* release_stack();
  inline void set_allocated_stack(::std::string* stack);

  // optional string voice_trigger = 8;
  inline bool has_voice_trigger() const;
  inline void clear_voice_trigger();
  static const int kVoiceTriggerFieldNumber = 8;
  inline const ::std::string& voice_trigger() const;
  inline void set_voice_trigger(const ::std::string& value);
  inline void set_voice_trigger(const char* value);
  inline void set_voice_trigger(const char* value, size_t size);
  inline ::std::string* mutable_voice_trigger();
  inline ::std::string* release_voice_trigger();
  inline void set_allocated_voice_trigger(::std::string* voice_trigger);

  // optional float voice_power = 9;
  inline bool has_voice_power() const;
  inline void clear_voice_power();
  static const int kVoicePowerFieldNumber = 9;
  inline float voice_power() const;
  inline void set_voice_power(float value);

  // optional uint32 trigger_start = 10;
  inline bool has_trigger_start() const;
  inline void clear_trigger_start();
  static const int kTriggerStartFieldNumber = 10;
  inline ::google::protobuf::uint32 trigger_start() const;
  inline void set_trigger_start(::google::protobuf::uint32 value);

  // optional uint32 trigger_length = 11;
  inline bool has_trigger_length() const;
  inline void clear_trigger_length();
  static const int kTriggerLengthFieldNumber = 11;
  inline ::google::protobuf::uint32 trigger_length() const;
  inline void set_trigger_length(::google::protobuf::uint32 value);

  // optional string skill_options = 12;
  inline bool has_skill_options() const;
  inline void clear_skill_options();
  static const int kSkillOptionsFieldNumber = 12;
  inline const ::std::string& skill_options() const;
  inline void set_skill_options(const ::std::string& value);
  inline void set_skill_options(const char* value);
  inline void set_skill_options(const char* value, size_t size);
  inline ::std::string* mutable_skill_options();
  inline ::std::string* release_skill_options();
  inline void set_allocated_skill_options(::std::string* skill_options);

  // @@protoc_insertion_point(class_scope:rokid.open.speech.v2.SpeechOptions)
 private:
  inline void set_has_lang();
  inline void clear_has_lang();
  inline void set_has_codec();
  inline void clear_has_codec();
  inline void set_has_vad_mode();
  inline void clear_has_vad_mode();
  inline void set_has_vend_timeout();
  inline void clear_has_vend_timeout();
  inline void set_has_no_nlp();
  inline void clear_has_no_nlp();
  inline void set_has_no_intermediate_asr();
  inline void clear_has_no_intermediate_asr();
  inline void set_has_stack();
  inline void clear_has_stack();
  inline void set_has_voice_trigger();
  inline void clear_has_voice_trigger();
  inline void set_has_voice_power();
  inline void clear_has_voice_power();
  inline void set_has_trigger_start();
  inline void clear_has_trigger_start();
  inline void set_has_trigger_length();
  inline void clear_has_trigger_length();
  inline void set_has_skill_options();
  inline void clear_has_skill_options();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int lang_;
  int codec_;
  int vad_mode_;
  ::google::protobuf::uint32 vend_timeout_;
  bool no_nlp_;
  bool no_intermediate_asr_;
  float voice_power_;
  ::std::string* stack_;
  ::std::string* voice_trigger_;
  ::google::protobuf::uint32 trigger_start_;
  ::google::protobuf::uint32 trigger_length_;
  ::std::string* skill_options_;
  friend void  protobuf_AddDesc_speech_2eproto();
  friend void protobuf_AssignDesc_speech_2eproto();
  friend void protobuf_ShutdownFile_speech_2eproto();

  void InitAsDefaultInstance();
  static SpeechOptions* default_instance_;
};
// -------------------------------------------------------------------

class SpeechRequest : public ::google::protobuf::Message {
 public:
  SpeechRequest();
  virtual ~SpeechRequest();

  SpeechRequest(const SpeechRequest& from);

  inline SpeechRequest& operator=(const SpeechRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SpeechRequest& default_instance();

  void Swap(SpeechRequest* other);

  // implements Message ----------------------------------------------

  SpeechRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SpeechRequest& from);
  void MergeFrom(const SpeechRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required .rokid.open.speech.v1.ReqType type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::rokid::open::speech::v1::ReqType type() const;
  inline void set_type(::rokid::open::speech::v1::ReqType value);

  // optional bytes voice = 3;
  inline bool has_voice() const;
  inline void clear_voice();
  static const int kVoiceFieldNumber = 3;
  inline const ::std::string& voice() const;
  inline void set_voice(const ::std::string& value);
  inline void set_voice(const char* value);
  inline void set_voice(const void* value, size_t size);
  inline ::std::string* mutable_voice();
  inline ::std::string* release_voice();
  inline void set_allocated_voice(::std::string* voice);

  // optional string asr = 4;
  inline bool has_asr() const;
  inline void clear_asr();
  static const int kAsrFieldNumber = 4;
  inline const ::std::string& asr() const;
  inline void set_asr(const ::std::string& value);
  inline void set_asr(const char* value);
  inline void set_asr(const char* value, size_t size);
  inline ::std::string* mutable_asr();
  inline ::std::string* release_asr();
  inline void set_allocated_asr(::std::string* asr);

  // optional .rokid.open.speech.v2.SpeechOptions options = 5;
  inline bool has_options() const;
  inline void clear_options();
  static const int kOptionsFieldNumber = 5;
  inline const ::rokid::open::speech::v2::SpeechOptions& options() const;
  inline ::rokid::open::speech::v2::SpeechOptions* mutable_options();
  inline ::rokid::open::speech::v2::SpeechOptions* release_options();
  inline void set_allocated_options(::rokid::open::speech::v2::SpeechOptions* options);

  // @@protoc_insertion_point(class_scope:rokid.open.speech.v2.SpeechRequest)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_voice();
  inline void clear_has_voice();
  inline void set_has_asr();
  inline void clear_has_asr();
  inline void set_has_options();
  inline void clear_has_options();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 id_;
  int type_;
  ::std::string* voice_;
  ::std::string* asr_;
  ::rokid::open::speech::v2::SpeechOptions* options_;
  friend void  protobuf_AddDesc_speech_2eproto();
  friend void protobuf_AssignDesc_speech_2eproto();
  friend void protobuf_ShutdownFile_speech_2eproto();

  void InitAsDefaultInstance();
  static SpeechRequest* default_instance_;
};
// -------------------------------------------------------------------

class SpeechResponse : public ::google::protobuf::Message {
 public:
  SpeechResponse();
  virtual ~SpeechResponse();

  SpeechResponse(const SpeechResponse& from);

  inline SpeechResponse& operator=(const SpeechResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SpeechResponse& default_instance();

  void Swap(SpeechResponse* other);

  // implements Message ----------------------------------------------

  SpeechResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SpeechResponse& from);
  void MergeFrom(const SpeechResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required .rokid.open.speech.v2.RespType type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::rokid::open::speech::v2::RespType type() const;
  inline void set_type(::rokid::open::speech::v2::RespType value);

  // required .rokid.open.speech.v1.SpeechErrorCode result = 3;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 3;
  inline ::rokid::open::speech::v1::SpeechErrorCode result() const;
  inline void set_result(::rokid::open::speech::v1::SpeechErrorCode value);

  // optional string asr = 4;
  inline bool has_asr() const;
  inline void clear_asr();
  static const int kAsrFieldNumber = 4;
  inline const ::std::string& asr() const;
  inline void set_asr(const ::std::string& value);
  inline void set_asr(const char* value);
  inline void set_asr(const char* value, size_t size);
  inline ::std::string* mutable_asr();
  inline ::std::string* release_asr();
  inline void set_allocated_asr(::std::string* asr);

  // optional string nlp = 5;
  inline bool has_nlp() const;
  inline void clear_nlp();
  static const int kNlpFieldNumber = 5;
  inline const ::std::string& nlp() const;
  inline void set_nlp(const ::std::string& value);
  inline void set_nlp(const char* value);
  inline void set_nlp(const char* value, size_t size);
  inline ::std::string* mutable_nlp();
  inline ::std::string* release_nlp();
  inline void set_allocated_nlp(::std::string* nlp);

  // optional string action = 6;
  inline bool has_action() const;
  inline void clear_action();
  static const int kActionFieldNumber = 6;
  inline const ::std::string& action() const;
  inline void set_action(const ::std::string& value);
  inline void set_action(const char* value);
  inline void set_action(const char* value, size_t size);
  inline ::std::string* mutable_action();
  inline ::std::string* release_action();
  inline void set_allocated_action(::std::string* action);

  // optional string extra = 7;
  inline bool has_extra() const;
  inline void clear_extra();
  static const int kExtraFieldNumber = 7;
  inline const ::std::string& extra() const;
  inline void set_extra(const ::std::string& value);
  inline void set_extra(const char* value);
  inline void set_extra(const char* value, size_t size);
  inline ::std::string* mutable_extra();
  inline ::std::string* release_extra();
  inline void set_allocated_extra(::std::string* extra);

  // @@protoc_insertion_point(class_scope:rokid.open.speech.v2.SpeechResponse)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_asr();
  inline void clear_has_asr();
  inline void set_has_nlp();
  inline void clear_has_nlp();
  inline void set_has_action();
  inline void clear_has_action();
  inline void set_has_extra();
  inline void clear_has_extra();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 id_;
  int type_;
  ::std::string* asr_;
  ::std::string* nlp_;
  ::std::string* action_;
  ::std::string* extra_;
  int result_;
  friend void  protobuf_AddDesc_speech_2eproto();
  friend void protobuf_AssignDesc_speech_2eproto();
  friend void protobuf_ShutdownFile_speech_2eproto();

  void InitAsDefaultInstance();
  static SpeechResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// SpeechOptions

// required .rokid.open.speech.v2.Lang lang = 1;
inline bool SpeechOptions::has_lang() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SpeechOptions::set_has_lang() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SpeechOptions::clear_has_lang() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SpeechOptions::clear_lang() {
  lang_ = 0;
  clear_has_lang();
}
inline ::rokid::open::speech::v2::Lang SpeechOptions::lang() const {
  // @@protoc_insertion_point(field_get:rokid.open.speech.v2.SpeechOptions.lang)
  return static_cast< ::rokid::open::speech::v2::Lang >(lang_);
}
inline void SpeechOptions::set_lang(::rokid::open::speech::v2::Lang value) {
  assert(::rokid::open::speech::v2::Lang_IsValid(value));
  set_has_lang();
  lang_ = value;
  // @@protoc_insertion_point(field_set:rokid.open.speech.v2.SpeechOptions.lang)
}

// required .rokid.open.speech.v1.Codec codec = 2;
inline bool SpeechOptions::has_codec() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SpeechOptions::set_has_codec() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SpeechOptions::clear_has_codec() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SpeechOptions::clear_codec() {
  codec_ = 0;
  clear_has_codec();
}
inline ::rokid::open::speech::v1::Codec SpeechOptions::codec() const {
  // @@protoc_insertion_point(field_get:rokid.open.speech.v2.SpeechOptions.codec)
  return static_cast< ::rokid::open::speech::v1::Codec >(codec_);
}
inline void SpeechOptions::set_codec(::rokid::open::speech::v1::Codec value) {
  assert(::rokid::open::speech::v1::Codec_IsValid(value));
  set_has_codec();
  codec_ = value;
  // @@protoc_insertion_point(field_set:rokid.open.speech.v2.SpeechOptions.codec)
}

// required .rokid.open.speech.v2.VadMode vad_mode = 3;
inline bool SpeechOptions::has_vad_mode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SpeechOptions::set_has_vad_mode() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SpeechOptions::clear_has_vad_mode() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SpeechOptions::clear_vad_mode() {
  vad_mode_ = 0;
  clear_has_vad_mode();
}
inline ::rokid::open::speech::v2::VadMode SpeechOptions::vad_mode() const {
  // @@protoc_insertion_point(field_get:rokid.open.speech.v2.SpeechOptions.vad_mode)
  return static_cast< ::rokid::open::speech::v2::VadMode >(vad_mode_);
}
inline void SpeechOptions::set_vad_mode(::rokid::open::speech::v2::VadMode value) {
  assert(::rokid::open::speech::v2::VadMode_IsValid(value));
  set_has_vad_mode();
  vad_mode_ = value;
  // @@protoc_insertion_point(field_set:rokid.open.speech.v2.SpeechOptions.vad_mode)
}

// optional uint32 vend_timeout = 4;
inline bool SpeechOptions::has_vend_timeout() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SpeechOptions::set_has_vend_timeout() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SpeechOptions::clear_has_vend_timeout() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SpeechOptions::clear_vend_timeout() {
  vend_timeout_ = 0u;
  clear_has_vend_timeout();
}
inline ::google::protobuf::uint32 SpeechOptions::vend_timeout() const {
  // @@protoc_insertion_point(field_get:rokid.open.speech.v2.SpeechOptions.vend_timeout)
  return vend_timeout_;
}
inline void SpeechOptions::set_vend_timeout(::google::protobuf::uint32 value) {
  set_has_vend_timeout();
  vend_timeout_ = value;
  // @@protoc_insertion_point(field_set:rokid.open.speech.v2.SpeechOptions.vend_timeout)
}

// required bool no_nlp = 5;
inline bool SpeechOptions::has_no_nlp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SpeechOptions::set_has_no_nlp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SpeechOptions::clear_has_no_nlp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SpeechOptions::clear_no_nlp() {
  no_nlp_ = false;
  clear_has_no_nlp();
}
inline bool SpeechOptions::no_nlp() const {
  // @@protoc_insertion_point(field_get:rokid.open.speech.v2.SpeechOptions.no_nlp)
  return no_nlp_;
}
inline void SpeechOptions::set_no_nlp(bool value) {
  set_has_no_nlp();
  no_nlp_ = value;
  // @@protoc_insertion_point(field_set:rokid.open.speech.v2.SpeechOptions.no_nlp)
}

// required bool no_intermediate_asr = 6;
inline bool SpeechOptions::has_no_intermediate_asr() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SpeechOptions::set_has_no_intermediate_asr() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SpeechOptions::clear_has_no_intermediate_asr() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SpeechOptions::clear_no_intermediate_asr() {
  no_intermediate_asr_ = false;
  clear_has_no_intermediate_asr();
}
inline bool SpeechOptions::no_intermediate_asr() const {
  // @@protoc_insertion_point(field_get:rokid.open.speech.v2.SpeechOptions.no_intermediate_asr)
  return no_intermediate_asr_;
}
inline void SpeechOptions::set_no_intermediate_asr(bool value) {
  set_has_no_intermediate_asr();
  no_intermediate_asr_ = value;
  // @@protoc_insertion_point(field_set:rokid.open.speech.v2.SpeechOptions.no_intermediate_asr)
}

// optional string stack = 7;
inline bool SpeechOptions::has_stack() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SpeechOptions::set_has_stack() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SpeechOptions::clear_has_stack() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SpeechOptions::clear_stack() {
  if (stack_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    stack_->clear();
  }
  clear_has_stack();
}
inline const ::std::string& SpeechOptions::stack() const {
  // @@protoc_insertion_point(field_get:rokid.open.speech.v2.SpeechOptions.stack)
  return *stack_;
}
inline void SpeechOptions::set_stack(const ::std::string& value) {
  set_has_stack();
  if (stack_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    stack_ = new ::std::string;
  }
  stack_->assign(value);
  // @@protoc_insertion_point(field_set:rokid.open.speech.v2.SpeechOptions.stack)
}
inline void SpeechOptions::set_stack(const char* value) {
  set_has_stack();
  if (stack_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    stack_ = new ::std::string;
  }
  stack_->assign(value);
  // @@protoc_insertion_point(field_set_char:rokid.open.speech.v2.SpeechOptions.stack)
}
inline void SpeechOptions::set_stack(const char* value, size_t size) {
  set_has_stack();
  if (stack_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    stack_ = new ::std::string;
  }
  stack_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:rokid.open.speech.v2.SpeechOptions.stack)
}
inline ::std::string* SpeechOptions::mutable_stack() {
  set_has_stack();
  if (stack_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    stack_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:rokid.open.speech.v2.SpeechOptions.stack)
  return stack_;
}
inline ::std::string* SpeechOptions::release_stack() {
  clear_has_stack();
  if (stack_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = stack_;
    stack_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SpeechOptions::set_allocated_stack(::std::string* stack) {
  if (stack_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete stack_;
  }
  if (stack) {
    set_has_stack();
    stack_ = stack;
  } else {
    clear_has_stack();
    stack_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:rokid.open.speech.v2.SpeechOptions.stack)
}

// optional string voice_trigger = 8;
inline bool SpeechOptions::has_voice_trigger() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SpeechOptions::set_has_voice_trigger() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SpeechOptions::clear_has_voice_trigger() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SpeechOptions::clear_voice_trigger() {
  if (voice_trigger_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    voice_trigger_->clear();
  }
  clear_has_voice_trigger();
}
inline const ::std::string& SpeechOptions::voice_trigger() const {
  // @@protoc_insertion_point(field_get:rokid.open.speech.v2.SpeechOptions.voice_trigger)
  return *voice_trigger_;
}
inline void SpeechOptions::set_voice_trigger(const ::std::string& value) {
  set_has_voice_trigger();
  if (voice_trigger_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    voice_trigger_ = new ::std::string;
  }
  voice_trigger_->assign(value);
  // @@protoc_insertion_point(field_set:rokid.open.speech.v2.SpeechOptions.voice_trigger)
}
inline void SpeechOptions::set_voice_trigger(const char* value) {
  set_has_voice_trigger();
  if (voice_trigger_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    voice_trigger_ = new ::std::string;
  }
  voice_trigger_->assign(value);
  // @@protoc_insertion_point(field_set_char:rokid.open.speech.v2.SpeechOptions.voice_trigger)
}
inline void SpeechOptions::set_voice_trigger(const char* value, size_t size) {
  set_has_voice_trigger();
  if (voice_trigger_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    voice_trigger_ = new ::std::string;
  }
  voice_trigger_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:rokid.open.speech.v2.SpeechOptions.voice_trigger)
}
inline ::std::string* SpeechOptions::mutable_voice_trigger() {
  set_has_voice_trigger();
  if (voice_trigger_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    voice_trigger_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:rokid.open.speech.v2.SpeechOptions.voice_trigger)
  return voice_trigger_;
}
inline ::std::string* SpeechOptions::release_voice_trigger() {
  clear_has_voice_trigger();
  if (voice_trigger_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = voice_trigger_;
    voice_trigger_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SpeechOptions::set_allocated_voice_trigger(::std::string* voice_trigger) {
  if (voice_trigger_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete voice_trigger_;
  }
  if (voice_trigger) {
    set_has_voice_trigger();
    voice_trigger_ = voice_trigger;
  } else {
    clear_has_voice_trigger();
    voice_trigger_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:rokid.open.speech.v2.SpeechOptions.voice_trigger)
}

// optional float voice_power = 9;
inline bool SpeechOptions::has_voice_power() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SpeechOptions::set_has_voice_power() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SpeechOptions::clear_has_voice_power() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SpeechOptions::clear_voice_power() {
  voice_power_ = 0;
  clear_has_voice_power();
}
inline float SpeechOptions::voice_power() const {
  // @@protoc_insertion_point(field_get:rokid.open.speech.v2.SpeechOptions.voice_power)
  return voice_power_;
}
inline void SpeechOptions::set_voice_power(float value) {
  set_has_voice_power();
  voice_power_ = value;
  // @@protoc_insertion_point(field_set:rokid.open.speech.v2.SpeechOptions.voice_power)
}

// optional uint32 trigger_start = 10;
inline bool SpeechOptions::has_trigger_start() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SpeechOptions::set_has_trigger_start() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SpeechOptions::clear_has_trigger_start() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SpeechOptions::clear_trigger_start() {
  trigger_start_ = 0u;
  clear_has_trigger_start();
}
inline ::google::protobuf::uint32 SpeechOptions::trigger_start() const {
  // @@protoc_insertion_point(field_get:rokid.open.speech.v2.SpeechOptions.trigger_start)
  return trigger_start_;
}
inline void SpeechOptions::set_trigger_start(::google::protobuf::uint32 value) {
  set_has_trigger_start();
  trigger_start_ = value;
  // @@protoc_insertion_point(field_set:rokid.open.speech.v2.SpeechOptions.trigger_start)
}

// optional uint32 trigger_length = 11;
inline bool SpeechOptions::has_trigger_length() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SpeechOptions::set_has_trigger_length() {
  _has_bits_[0] |= 0x00000400u;
}
inline void SpeechOptions::clear_has_trigger_length() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void SpeechOptions::clear_trigger_length() {
  trigger_length_ = 0u;
  clear_has_trigger_length();
}
inline ::google::protobuf::uint32 SpeechOptions::trigger_length() const {
  // @@protoc_insertion_point(field_get:rokid.open.speech.v2.SpeechOptions.trigger_length)
  return trigger_length_;
}
inline void SpeechOptions::set_trigger_length(::google::protobuf::uint32 value) {
  set_has_trigger_length();
  trigger_length_ = value;
  // @@protoc_insertion_point(field_set:rokid.open.speech.v2.SpeechOptions.trigger_length)
}

// optional string skill_options = 12;
inline bool SpeechOptions::has_skill_options() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void SpeechOptions::set_has_skill_options() {
  _has_bits_[0] |= 0x00000800u;
}
inline void SpeechOptions::clear_has_skill_options() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void SpeechOptions::clear_skill_options() {
  if (skill_options_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    skill_options_->clear();
  }
  clear_has_skill_options();
}
inline const ::std::string& SpeechOptions::skill_options() const {
  // @@protoc_insertion_point(field_get:rokid.open.speech.v2.SpeechOptions.skill_options)
  return *skill_options_;
}
inline void SpeechOptions::set_skill_options(const ::std::string& value) {
  set_has_skill_options();
  if (skill_options_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    skill_options_ = new ::std::string;
  }
  skill_options_->assign(value);
  // @@protoc_insertion_point(field_set:rokid.open.speech.v2.SpeechOptions.skill_options)
}
inline void SpeechOptions::set_skill_options(const char* value) {
  set_has_skill_options();
  if (skill_options_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    skill_options_ = new ::std::string;
  }
  skill_options_->assign(value);
  // @@protoc_insertion_point(field_set_char:rokid.open.speech.v2.SpeechOptions.skill_options)
}
inline void SpeechOptions::set_skill_options(const char* value, size_t size) {
  set_has_skill_options();
  if (skill_options_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    skill_options_ = new ::std::string;
  }
  skill_options_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:rokid.open.speech.v2.SpeechOptions.skill_options)
}
inline ::std::string* SpeechOptions::mutable_skill_options() {
  set_has_skill_options();
  if (skill_options_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    skill_options_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:rokid.open.speech.v2.SpeechOptions.skill_options)
  return skill_options_;
}
inline ::std::string* SpeechOptions::release_skill_options() {
  clear_has_skill_options();
  if (skill_options_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = skill_options_;
    skill_options_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SpeechOptions::set_allocated_skill_options(::std::string* skill_options) {
  if (skill_options_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete skill_options_;
  }
  if (skill_options) {
    set_has_skill_options();
    skill_options_ = skill_options;
  } else {
    clear_has_skill_options();
    skill_options_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:rokid.open.speech.v2.SpeechOptions.skill_options)
}

// -------------------------------------------------------------------

// SpeechRequest

// required int32 id = 1;
inline bool SpeechRequest::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SpeechRequest::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SpeechRequest::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SpeechRequest::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 SpeechRequest::id() const {
  // @@protoc_insertion_point(field_get:rokid.open.speech.v2.SpeechRequest.id)
  return id_;
}
inline void SpeechRequest::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:rokid.open.speech.v2.SpeechRequest.id)
}

// required .rokid.open.speech.v1.ReqType type = 2;
inline bool SpeechRequest::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SpeechRequest::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SpeechRequest::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SpeechRequest::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::rokid::open::speech::v1::ReqType SpeechRequest::type() const {
  // @@protoc_insertion_point(field_get:rokid.open.speech.v2.SpeechRequest.type)
  return static_cast< ::rokid::open::speech::v1::ReqType >(type_);
}
inline void SpeechRequest::set_type(::rokid::open::speech::v1::ReqType value) {
  assert(::rokid::open::speech::v1::ReqType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:rokid.open.speech.v2.SpeechRequest.type)
}

// optional bytes voice = 3;
inline bool SpeechRequest::has_voice() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SpeechRequest::set_has_voice() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SpeechRequest::clear_has_voice() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SpeechRequest::clear_voice() {
  if (voice_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    voice_->clear();
  }
  clear_has_voice();
}
inline const ::std::string& SpeechRequest::voice() const {
  // @@protoc_insertion_point(field_get:rokid.open.speech.v2.SpeechRequest.voice)
  return *voice_;
}
inline void SpeechRequest::set_voice(const ::std::string& value) {
  set_has_voice();
  if (voice_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    voice_ = new ::std::string;
  }
  voice_->assign(value);
  // @@protoc_insertion_point(field_set:rokid.open.speech.v2.SpeechRequest.voice)
}
inline void SpeechRequest::set_voice(const char* value) {
  set_has_voice();
  if (voice_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    voice_ = new ::std::string;
  }
  voice_->assign(value);
  // @@protoc_insertion_point(field_set_char:rokid.open.speech.v2.SpeechRequest.voice)
}
inline void SpeechRequest::set_voice(const void* value, size_t size) {
  set_has_voice();
  if (voice_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    voice_ = new ::std::string;
  }
  voice_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:rokid.open.speech.v2.SpeechRequest.voice)
}
inline ::std::string* SpeechRequest::mutable_voice() {
  set_has_voice();
  if (voice_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    voice_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:rokid.open.speech.v2.SpeechRequest.voice)
  return voice_;
}
inline ::std::string* SpeechRequest::release_voice() {
  clear_has_voice();
  if (voice_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = voice_;
    voice_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SpeechRequest::set_allocated_voice(::std::string* voice) {
  if (voice_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete voice_;
  }
  if (voice) {
    set_has_voice();
    voice_ = voice;
  } else {
    clear_has_voice();
    voice_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:rokid.open.speech.v2.SpeechRequest.voice)
}

// optional string asr = 4;
inline bool SpeechRequest::has_asr() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SpeechRequest::set_has_asr() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SpeechRequest::clear_has_asr() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SpeechRequest::clear_asr() {
  if (asr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    asr_->clear();
  }
  clear_has_asr();
}
inline const ::std::string& SpeechRequest::asr() const {
  // @@protoc_insertion_point(field_get:rokid.open.speech.v2.SpeechRequest.asr)
  return *asr_;
}
inline void SpeechRequest::set_asr(const ::std::string& value) {
  set_has_asr();
  if (asr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    asr_ = new ::std::string;
  }
  asr_->assign(value);
  // @@protoc_insertion_point(field_set:rokid.open.speech.v2.SpeechRequest.asr)
}
inline void SpeechRequest::set_asr(const char* value) {
  set_has_asr();
  if (asr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    asr_ = new ::std::string;
  }
  asr_->assign(value);
  // @@protoc_insertion_point(field_set_char:rokid.open.speech.v2.SpeechRequest.asr)
}
inline void SpeechRequest::set_asr(const char* value, size_t size) {
  set_has_asr();
  if (asr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    asr_ = new ::std::string;
  }
  asr_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:rokid.open.speech.v2.SpeechRequest.asr)
}
inline ::std::string* SpeechRequest::mutable_asr() {
  set_has_asr();
  if (asr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    asr_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:rokid.open.speech.v2.SpeechRequest.asr)
  return asr_;
}
inline ::std::string* SpeechRequest::release_asr() {
  clear_has_asr();
  if (asr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = asr_;
    asr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SpeechRequest::set_allocated_asr(::std::string* asr) {
  if (asr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete asr_;
  }
  if (asr) {
    set_has_asr();
    asr_ = asr;
  } else {
    clear_has_asr();
    asr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:rokid.open.speech.v2.SpeechRequest.asr)
}

// optional .rokid.open.speech.v2.SpeechOptions options = 5;
inline bool SpeechRequest::has_options() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SpeechRequest::set_has_options() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SpeechRequest::clear_has_options() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SpeechRequest::clear_options() {
  if (options_ != NULL) options_->::rokid::open::speech::v2::SpeechOptions::Clear();
  clear_has_options();
}
inline const ::rokid::open::speech::v2::SpeechOptions& SpeechRequest::options() const {
  // @@protoc_insertion_point(field_get:rokid.open.speech.v2.SpeechRequest.options)
  return options_ != NULL ? *options_ : *default_instance_->options_;
}
inline ::rokid::open::speech::v2::SpeechOptions* SpeechRequest::mutable_options() {
  set_has_options();
  if (options_ == NULL) options_ = new ::rokid::open::speech::v2::SpeechOptions;
  // @@protoc_insertion_point(field_mutable:rokid.open.speech.v2.SpeechRequest.options)
  return options_;
}
inline ::rokid::open::speech::v2::SpeechOptions* SpeechRequest::release_options() {
  clear_has_options();
  ::rokid::open::speech::v2::SpeechOptions* temp = options_;
  options_ = NULL;
  return temp;
}
inline void SpeechRequest::set_allocated_options(::rokid::open::speech::v2::SpeechOptions* options) {
  delete options_;
  options_ = options;
  if (options) {
    set_has_options();
  } else {
    clear_has_options();
  }
  // @@protoc_insertion_point(field_set_allocated:rokid.open.speech.v2.SpeechRequest.options)
}

// -------------------------------------------------------------------

// SpeechResponse

// required int32 id = 1;
inline bool SpeechResponse::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SpeechResponse::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SpeechResponse::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SpeechResponse::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 SpeechResponse::id() const {
  // @@protoc_insertion_point(field_get:rokid.open.speech.v2.SpeechResponse.id)
  return id_;
}
inline void SpeechResponse::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:rokid.open.speech.v2.SpeechResponse.id)
}

// required .rokid.open.speech.v2.RespType type = 2;
inline bool SpeechResponse::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SpeechResponse::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SpeechResponse::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SpeechResponse::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::rokid::open::speech::v2::RespType SpeechResponse::type() const {
  // @@protoc_insertion_point(field_get:rokid.open.speech.v2.SpeechResponse.type)
  return static_cast< ::rokid::open::speech::v2::RespType >(type_);
}
inline void SpeechResponse::set_type(::rokid::open::speech::v2::RespType value) {
  assert(::rokid::open::speech::v2::RespType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:rokid.open.speech.v2.SpeechResponse.type)
}

// required .rokid.open.speech.v1.SpeechErrorCode result = 3;
inline bool SpeechResponse::has_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SpeechResponse::set_has_result() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SpeechResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SpeechResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::rokid::open::speech::v1::SpeechErrorCode SpeechResponse::result() const {
  // @@protoc_insertion_point(field_get:rokid.open.speech.v2.SpeechResponse.result)
  return static_cast< ::rokid::open::speech::v1::SpeechErrorCode >(result_);
}
inline void SpeechResponse::set_result(::rokid::open::speech::v1::SpeechErrorCode value) {
  assert(::rokid::open::speech::v1::SpeechErrorCode_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:rokid.open.speech.v2.SpeechResponse.result)
}

// optional string asr = 4;
inline bool SpeechResponse::has_asr() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SpeechResponse::set_has_asr() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SpeechResponse::clear_has_asr() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SpeechResponse::clear_asr() {
  if (asr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    asr_->clear();
  }
  clear_has_asr();
}
inline const ::std::string& SpeechResponse::asr() const {
  // @@protoc_insertion_point(field_get:rokid.open.speech.v2.SpeechResponse.asr)
  return *asr_;
}
inline void SpeechResponse::set_asr(const ::std::string& value) {
  set_has_asr();
  if (asr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    asr_ = new ::std::string;
  }
  asr_->assign(value);
  // @@protoc_insertion_point(field_set:rokid.open.speech.v2.SpeechResponse.asr)
}
inline void SpeechResponse::set_asr(const char* value) {
  set_has_asr();
  if (asr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    asr_ = new ::std::string;
  }
  asr_->assign(value);
  // @@protoc_insertion_point(field_set_char:rokid.open.speech.v2.SpeechResponse.asr)
}
inline void SpeechResponse::set_asr(const char* value, size_t size) {
  set_has_asr();
  if (asr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    asr_ = new ::std::string;
  }
  asr_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:rokid.open.speech.v2.SpeechResponse.asr)
}
inline ::std::string* SpeechResponse::mutable_asr() {
  set_has_asr();
  if (asr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    asr_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:rokid.open.speech.v2.SpeechResponse.asr)
  return asr_;
}
inline ::std::string* SpeechResponse::release_asr() {
  clear_has_asr();
  if (asr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = asr_;
    asr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SpeechResponse::set_allocated_asr(::std::string* asr) {
  if (asr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete asr_;
  }
  if (asr) {
    set_has_asr();
    asr_ = asr;
  } else {
    clear_has_asr();
    asr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:rokid.open.speech.v2.SpeechResponse.asr)
}

// optional string nlp = 5;
inline bool SpeechResponse::has_nlp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SpeechResponse::set_has_nlp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SpeechResponse::clear_has_nlp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SpeechResponse::clear_nlp() {
  if (nlp_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nlp_->clear();
  }
  clear_has_nlp();
}
inline const ::std::string& SpeechResponse::nlp() const {
  // @@protoc_insertion_point(field_get:rokid.open.speech.v2.SpeechResponse.nlp)
  return *nlp_;
}
inline void SpeechResponse::set_nlp(const ::std::string& value) {
  set_has_nlp();
  if (nlp_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nlp_ = new ::std::string;
  }
  nlp_->assign(value);
  // @@protoc_insertion_point(field_set:rokid.open.speech.v2.SpeechResponse.nlp)
}
inline void SpeechResponse::set_nlp(const char* value) {
  set_has_nlp();
  if (nlp_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nlp_ = new ::std::string;
  }
  nlp_->assign(value);
  // @@protoc_insertion_point(field_set_char:rokid.open.speech.v2.SpeechResponse.nlp)
}
inline void SpeechResponse::set_nlp(const char* value, size_t size) {
  set_has_nlp();
  if (nlp_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nlp_ = new ::std::string;
  }
  nlp_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:rokid.open.speech.v2.SpeechResponse.nlp)
}
inline ::std::string* SpeechResponse::mutable_nlp() {
  set_has_nlp();
  if (nlp_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nlp_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:rokid.open.speech.v2.SpeechResponse.nlp)
  return nlp_;
}
inline ::std::string* SpeechResponse::release_nlp() {
  clear_has_nlp();
  if (nlp_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = nlp_;
    nlp_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SpeechResponse::set_allocated_nlp(::std::string* nlp) {
  if (nlp_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nlp_;
  }
  if (nlp) {
    set_has_nlp();
    nlp_ = nlp;
  } else {
    clear_has_nlp();
    nlp_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:rokid.open.speech.v2.SpeechResponse.nlp)
}

// optional string action = 6;
inline bool SpeechResponse::has_action() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SpeechResponse::set_has_action() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SpeechResponse::clear_has_action() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SpeechResponse::clear_action() {
  if (action_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    action_->clear();
  }
  clear_has_action();
}
inline const ::std::string& SpeechResponse::action() const {
  // @@protoc_insertion_point(field_get:rokid.open.speech.v2.SpeechResponse.action)
  return *action_;
}
inline void SpeechResponse::set_action(const ::std::string& value) {
  set_has_action();
  if (action_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    action_ = new ::std::string;
  }
  action_->assign(value);
  // @@protoc_insertion_point(field_set:rokid.open.speech.v2.SpeechResponse.action)
}
inline void SpeechResponse::set_action(const char* value) {
  set_has_action();
  if (action_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    action_ = new ::std::string;
  }
  action_->assign(value);
  // @@protoc_insertion_point(field_set_char:rokid.open.speech.v2.SpeechResponse.action)
}
inline void SpeechResponse::set_action(const char* value, size_t size) {
  set_has_action();
  if (action_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    action_ = new ::std::string;
  }
  action_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:rokid.open.speech.v2.SpeechResponse.action)
}
inline ::std::string* SpeechResponse::mutable_action() {
  set_has_action();
  if (action_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    action_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:rokid.open.speech.v2.SpeechResponse.action)
  return action_;
}
inline ::std::string* SpeechResponse::release_action() {
  clear_has_action();
  if (action_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = action_;
    action_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SpeechResponse::set_allocated_action(::std::string* action) {
  if (action_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete action_;
  }
  if (action) {
    set_has_action();
    action_ = action;
  } else {
    clear_has_action();
    action_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:rokid.open.speech.v2.SpeechResponse.action)
}

// optional string extra = 7;
inline bool SpeechResponse::has_extra() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SpeechResponse::set_has_extra() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SpeechResponse::clear_has_extra() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SpeechResponse::clear_extra() {
  if (extra_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    extra_->clear();
  }
  clear_has_extra();
}
inline const ::std::string& SpeechResponse::extra() const {
  // @@protoc_insertion_point(field_get:rokid.open.speech.v2.SpeechResponse.extra)
  return *extra_;
}
inline void SpeechResponse::set_extra(const ::std::string& value) {
  set_has_extra();
  if (extra_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    extra_ = new ::std::string;
  }
  extra_->assign(value);
  // @@protoc_insertion_point(field_set:rokid.open.speech.v2.SpeechResponse.extra)
}
inline void SpeechResponse::set_extra(const char* value) {
  set_has_extra();
  if (extra_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    extra_ = new ::std::string;
  }
  extra_->assign(value);
  // @@protoc_insertion_point(field_set_char:rokid.open.speech.v2.SpeechResponse.extra)
}
inline void SpeechResponse::set_extra(const char* value, size_t size) {
  set_has_extra();
  if (extra_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    extra_ = new ::std::string;
  }
  extra_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:rokid.open.speech.v2.SpeechResponse.extra)
}
inline ::std::string* SpeechResponse::mutable_extra() {
  set_has_extra();
  if (extra_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    extra_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:rokid.open.speech.v2.SpeechResponse.extra)
  return extra_;
}
inline ::std::string* SpeechResponse::release_extra() {
  clear_has_extra();
  if (extra_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = extra_;
    extra_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SpeechResponse::set_allocated_extra(::std::string* extra) {
  if (extra_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete extra_;
  }
  if (extra) {
    set_has_extra();
    extra_ = extra;
  } else {
    clear_has_extra();
    extra_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:rokid.open.speech.v2.SpeechResponse.extra)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace v2
}  // namespace speech
}  // namespace open
}  // namespace rokid

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::rokid::open::speech::v2::RespType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::rokid::open::speech::v2::RespType>() {
  return ::rokid::open::speech::v2::RespType_descriptor();
}
template <> struct is_proto_enum< ::rokid::open::speech::v2::Lang> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::rokid::open::speech::v2::Lang>() {
  return ::rokid::open::speech::v2::Lang_descriptor();
}
template <> struct is_proto_enum< ::rokid::open::speech::v2::VadMode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::rokid::open::speech::v2::VadMode>() {
  return ::rokid::open::speech::v2::VadMode_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_speech_2eproto__INCLUDED
